/*
#include "Cudah.h"
#include "NVEncoderAPI.h"
#include "NVEncodeDataTypes.h"
#include <nvcuvid.h>
#include <cuviddec.h>
#include <fstream>

#ifndef TYPES_H
#define TYPES_H

#include "NVEncodeDataTypes.h"

#ifdef __cplusplus
extern "C" {
#endif

    struct NVEncoderParams
    {
        char configFile[256];
        char inputFile[256];
        char outputFile[256];
        int measure_psnr;
        int measure_fps;
        int force_device;
        int iSurfaceFormat;
        int iPictureType;
        int nDeviceMemPitch;

        int                     iCodecType;       //    NVVE_CODEC_TYPE,
        int                     GPU_count;        //    Choose the specific GPU count
        int                     GPU_devID;        //    Choose the specific GPU device ID
        int                     iUseDeviceMem;    //    CUDA with DEVICE_MEMORY_INPUT (for encoding)
        int                     iForcedGPU;       //    NVVE_FORCE_GPU_SELECTION            //F22
        int                     iOutputSize[2];   //    NVVE_OUT_SIZE,
        int                     iInputSize[2];    //    NVVE_IN_SIZE,
        float                   fAspectRatio;     //
        int                     iAspectRatio[3];  //    NVVE_ASPECT_RATIO,
        NVVE_FIELD_MODE         Fieldmode;        //    NVVE_FIELD_ENC_MODE,
        int                     iP_Interval;      //    NVVE_P_INTERVAL,
        int                     iIDR_Period;      //    NVVE_IDR_PERIOD,
        int                     iDynamicGOP;      //    NVVE_DYNAMIC_GOP,
        NVVE_RateCtrlType       RCType;           //    NVVE_RC_TYPE,
        int                     iAvgBitrate;      //    NVVE_AVG_BITRATE,
        int                     iPeakBitrate;     //    NVVE_PEAK_BITRATE,
        int                     iQP_Level_Intra;  //    NVVE_QP_LEVEL_INTRA,
        int                     iQP_Level_InterP; //    NVVE_QP_LEVEL_INTER_P,
        int                     iQP_Level_InterB; //    NVVE_QP_LEVEL_INTER_B,
        int                     iFrameRate[2];    //    NVVE_FRAME_RATE,
        int                     iDeblockMode;     //    NVVE_DEBLOCK_MODE,
        int                     iProfileLevel;    //    NVVE_PROFILE_LEVEL,
        int                     iForceIntra;      //    NVVE_FORCE_INTRA,
        int                     iForceIDR;        //    NVVE_FORCE_IDR,
        int                     iClearStat;       //    NVVE_CLEAR_STAT,
        NVVE_DI_MODE            DIMode;           //    NVVE_SET_DEINTERLACE,
        NVVE_PRESETS_TARGET     Presets;          //    NVVE_PRESETS,
        int                     iDisableCabac;    //    NVVE_DISABLE_CABAC,
        int                     iNaluFramingType; //    NVVE_CONFIGURE_NALU_FRAMING_TYPE
        int                     iDisableSPSPPS;   //    NVVE_DISABLE_SPS_PPS
        NVVE_GPUOffloadLevel    GPUOffloadLevel;  //    NVVE_GPU_OFFLOAD_LEVEL
        NVVE_GPUOffloadLevel    MaxOffloadLevel;  //    NVVE_GPU_OFFLOAD_LEVEL_MAX
        int                     iSliceCnt;        //    NVVE_SLICE_COUNT                    //F19
        int                     iMultiGPU;        //    NVVE_MULTI_GPU                      //F21
        int                     iDeviceMemInput;  //    NVVE_DEVICE_MEMORY_INPUT            //F23

        //    NVVE_STAT_NUM_CODED_FRAMES,
        //    NVVE_STAT_NUM_RECEIVED_FRAMES,
        //    NVVE_STAT_BITRATE,
        //    NVVE_STAT_NUM_BITS_GENERATED,
        //    NVVE_GET_PTS_DIFF_TIME,
        //    NVVE_GET_PTS_BASE_TIME,
        //    NVVE_GET_PTS_CODED_TIME,
        //    NVVE_GET_PTS_RECEIVED_TIME,
        //    NVVE_STAT_ELAPSED_TIME,
        //    NVVE_STAT_QBUF_FULLNESS,
        //    NVVE_STAT_PERF_FPS,
        //    NVVE_STAT_PERF_AVG_TIME,
    };

    typedef struct
    {
        char *name;
        char *yuv_type;
        int  bpp;
    } _sYUVParams;

    static _sYUVParams sSurfaceFormat[] =
    {
        { "UYVY", "4:2:2", 16 },
        { "YUY2", "4:2:2", 16 },
        { "YV12", "4:2:0", 12 },
        { "NV12", "4:2:0", 12 },
        { "IYUV", "4:2:0", 12 },
        { NULL  , 0 }
    };

    typedef struct
    {
        char *name;
        int  params;
    } _sNVVEEncodeParams;

    static _sNVVEEncodeParams sNVVE_EncodeParams[] =
    {
        { "UNDEFINED", 1 },
        { "NVVE_OUT_SIZE", 2 },
        { "NVVE_ASPECT_RATIO", 3 },
        { "NVVE_FIELD_ENC_MODE", 1 },
        { "NVVE_P_INTERVAL", 1 },
        { "NVVE_IDR_PERIOD", 1 },
        { "NVVE_DYNAMIC_GOP", 1 },
        { "NVVE_RC_TYPE", 1 },
        { "NVVE_AVG_BITRATE", 1 },
        { "NVVE_PEAK_BITRATE", 1 },
        { "NVVE_QP_LEVEL_INTRA", 1 },
        { "NVVE_QP_LEVEL_INTER_P", 1 },
        { "NVVE_QP_LEVEL_INTER_B", 1 },
        { "NVVE_FRAME_RATE", 2 },
        { "NVVE_DEBLOCK_MODE", 1 },
        { "NVVE_PROFILE_LEVEL", 1 },
        { "NVVE_FORCE_INTRA (DS)", 1 },            //DShow only
        { "NVVE_FORCE_IDR   (DS)", 1 },            //DShow only
        { "NVVE_CLEAR_STAT  (DS)", 1 },            //DShow only
        { "NVVE_SET_DEINTERLACE", 1 },
        { "NVVE_PRESETS", 1 },
        { "NVVE_IN_SIZE", 2 },
        { "NVVE_STAT_NUM_CODED_FRAMES (DS)", 1 },       //DShow only
        { "NVVE_STAT_NUM_RECEIVED_FRAMES (DS)", 1 },    //DShow only
        { "NVVE_STAT_BITRATE (DS)", 1 },                //DShow only
        { "NVVE_STAT_NUM_BITS_GENERATED (DS)", 1 },     //DShow only
        { "NVVE_GET_PTS_DIFF_TIME (DS)", 1 },           //DShow only
        { "NVVE_GET_PTS_BASE_TIME (DS)", 1 },           //DShow only
        { "NVVE_GET_PTS_CODED_TIME (DS)", 1 },          //DShow only
        { "NVVE_GET_PTS_RECEIVED_TIME (DS)", 1 },       //DShow only
        { "NVVE_STAT_ELAPSED_TIME (DS)", 1 },           //DShow only
        { "NVVE_STAT_QBUF_FULLNESS (DS)", 1 },          //DShow only
        { "NVVE_STAT_PERF_FPS (DS)", 1 },               //DShow only
        { "NVVE_STAT_PERF_AVG_TIME (DS)", 1 },          //DShow only
        { "NVVE_DISABLE_CABAC", 1 },
        { "NVVE_CONFIGURE_NALU_FRAMING_TYPE", 1 },
        { "NVVE_DISABLE_SPS_PPS", 1 },
        { "NVVE_SLICE_COUNT", 1 },
        { "NVVE_GPU_OFFLOAD_LEVEL", 1 },
        { "NVVE_GPU_OFFLOAD_LEVEL_MAX", 1 },
        { "NVVE_MULTI_GPU", 1 },
        { "NVVE_GET_GPU_COUNT", 1 },
        { "NVVE_GET_GPU_ATTRIBUTES", 1 },
        { "NVVE_FORCE_GPU_SELECTION", 1 },
        { "NVVE_DEVICE_MEMORY_INPUT", 1 },
        { "NVVE_DEVICE_CTX_LOCK", 1 },
        { NULL, 0 }
    };

    static _sNVVEEncodeParams sProfileName[] =
    {
        { "Baseline", 0x42 },
        { "Main"    , 0x4d },
        { "High"    , 0x64 },
        { NULL      , 0    }
    };

    static _sNVVEEncodeParams sProfileLevel[] =
    {
        { "1.0", 0x0a },
        { "1.1", 0x0b },
        { "1.2", 0x0c },
        { "1.3", 0x0d },
        { "2.0", 0x14 },
        { "2.1", 0x15 },
        { "2.2", 0x16 },
        { "3.0", 0x1e },
        { "3.1", 0x1f },
        { "3.2", 0x20 },
        { "4.0", 0x28 },
        { "4.1", 0x29 },
        { "4.2", 0x29 },
        { "5.0", 0x32 },
        { "5.1", 0x33 },
        { "Auto", 0xff },
        { NULL , 0    }
    };


    static char *sVideoEncodePresets[] =
    {
        "PSP         ( 320x 240)",
        "iPod/iPhone ( 320x 240)",
        "AVCHD",
        "BluRay",
        "HDV_1440",
        "ZuneHD",
        "FlipCam",
        NULL
    };

    static char *sGPUOffloadLevel[] =
    {
        "CPU PEL processing",
        "GPU: Motion Estimation & Intra Prediction",
        "GPU: Full Encode",
        NULL
    };

    static char *sPictureType[] =
    {
        "Frame Mode",
        "Field Mode (top first)",
        "Field Mode (bottom first)",
        "Field Mode (picaff) unsupported",
        NULL
    };

    static char *sPictureStructure[] =
    {
        "Unknown",
        "Top Field",
        "Bottom Field",
        "Frame Picture",
        NULL
    };

    // Rate Control Method (NVVE_RC_TYPE)
    static char *sNVVE_RateCtrlType[] =
    {
        "Rate Control CQP",
        "Rate Control VBR",
        "Rate Control CBR with QP",
        "Rate Control VBR with Min QP",
        NULL
    };

#ifdef __cplusplus
}
#endif

#endif

unsigned char* data;
int w = 64;
int h = 64;
int cmps = 3;
unsigned int bytesWritten;

CUvideoparser hParser_;

static unsigned char *_stdcall NVDefault_HandleAcquireBitStream(int *pBufferSize, void *pUserdata)
{
    *pBufferSize = w * h * cmps;
    return data;
}

//NVCUVENC callback function to signal that the encoded bitstream is ready to be written to file
static void _stdcall NVDefault_HandleReleaseBitStream(int nBytesInBuffer, unsigned char *cb, void *pUserdata)
{
    std::ofstream file("test.txt");
    file.write((const char*)cb, nBytesInBuffer);
    file.close();
    bytesWritten = nBytesInBuffer;
    return;
}

int __stdcall HandleDecoding(void* userData, CUVIDPICPARAMS* format)
{
    CUvideodecoder decoder = (CUvideodecoder)userData;
    CUresult oResult = cuvidDecodePicture(decoder, format);
    assert(CUDA_SUCCESS == oResult);
    return 1;
}

int __stdcall HandleVideoData(void *pUserData, CUVIDSOURCEDATAPACKET *pPacket)
{
    // Parser calls back for decode & display within cuvidParseVideoData
    CUresult oResult = cuvidParseVideoData(hParser_, pPacket);
    assert(CUDA_SUCCESS == oResult);
    return 1;
} */


        /*
    void *m_pEncoder;
    NVEncoderParams params;
    ZeroMemory(&params, sizeof(NVEncoderParams));
    HRESULT hr = NVCreateEncoder(&m_pEncoder);
    DEBUG_OUT_A("%d", hr);
    params.iCodecType = NV_CODEC_TYPE_H264;

    hr = NVSetCodec(m_pEncoder, params.iCodecType);
    DEBUG_OUT_A("%d", hr);
   
    data = new unsigned char[w* h * cmps];
    params.iOutputSize[0] = w;
    params.iOutputSize[1] = h;
    params.iAspectRatio[0]= 1;
    params.iAspectRatio[1]= 1;
    params.iAspectRatio[2]= 0;
    params.Fieldmode = MODE_FRAME;
    params.iP_Interval = 3;
    params.iIDR_Period = 15;
    params.iDynamicGOP = 0;
    params.RCType = RC_VBR;
    params.iAvgBitrate = 4000000;
    params.iPeakBitrate = 10000000;
    params.iQP_Level_Intra = 15;
    params.iQP_Level_InterP = 28;
    params.iQP_Level_InterB = 31;
    params.iFrameRate[0] = 30000;
    params.iFrameRate[1] = 1000;
    params.iDeblockMode = 1;
    params.iProfileLevel = 65357;
    params.iForceIntra = 0;
    params.iForceIDR = 0;
    params.iClearStat = 0;
    params.DIMode = DI_MEDIAN;
    params.Presets = ENC_PRESET_AVCHD;
    params.iDisableCabac = 0;
    params.iNaluFramingType = 0;
    params.iDisableSPSPPS = 0;

    INT null = 0;
    INT gpuID = 0;
    NVVE_GPUOffloadLevel eMaxOffloadLevel = NVVE_GPU_OFFLOAD_ALL;

    hr = NVSetParamValue(m_pEncoder, NVVE_GPU_OFFLOAD_LEVEL, &(eMaxOffloadLevel));
    DEBUG_OUT_A("%d", hr);

    NVSetParamValue(m_pEncoder, NVVE_FORCE_GPU_SELECTION, &gpuID);
    DEBUG_OUT_A("%d", hr);

    hr = NVSetParamValue(m_pEncoder, NVVE_OUT_SIZE, &params.iOutputSize);
    DEBUG_OUT_A("%d", hr);

    hr = NVSetParamValue(m_pEncoder, NVVE_IN_SIZE, &params.iOutputSize);
    DEBUG_OUT_A("%d", hr);

    hr = NVSetParamValue(m_pEncoder, NVVE_ASPECT_RATIO, &params.iAspectRatio);
    DEBUG_OUT_A("%d", hr);

    hr = NVSetParamValue(m_pEncoder, NVVE_FIELD_ENC_MODE, &params.Fieldmode);
    DEBUG_OUT_A("%d", hr);

    hr = NVSetParamValue(m_pEncoder, NVVE_P_INTERVAL, &params.iP_Interval);
    DEBUG_OUT_A("%d", hr);

    hr = NVSetParamValue(m_pEncoder, NVVE_IDR_PERIOD, &params.iIDR_Period);
    DEBUG_OUT_A("%d", hr);

    hr = NVSetParamValue(m_pEncoder, NVVE_DYNAMIC_GOP, &params.iDynamicGOP);
    DEBUG_OUT_A("%d", hr);

    hr = NVSetParamValue(m_pEncoder, NVVE_RC_TYPE, &params.RCType);
    DEBUG_OUT_A("%d", hr);

    hr = NVSetParamValue(m_pEncoder, NVVE_AVG_BITRATE, &params.iAvgBitrate);
    DEBUG_OUT_A("%d", hr);

    hr = NVSetParamValue(m_pEncoder, NVVE_PEAK_BITRATE, &params.iPeakBitrate);
    DEBUG_OUT_A("%d", hr);

    hr = NVSetParamValue(m_pEncoder, NVVE_QP_LEVEL_INTRA, &params.RCType);
    DEBUG_OUT_A("%d", hr);

    hr = NVSetParamValue(m_pEncoder, NVVE_QP_LEVEL_INTER_P, &params.RCType);
    DEBUG_OUT_A("%d", hr);

    hr = NVSetParamValue(m_pEncoder, NVVE_QP_LEVEL_INTER_B, &params.RCType);
    DEBUG_OUT_A("%d", hr);

    hr = NVSetParamValue(m_pEncoder, NVVE_FRAME_RATE, &params.iFrameRate);
    DEBUG_OUT_A("%d", hr);

    hr = NVSetParamValue(m_pEncoder, NVVE_DEBLOCK_MODE, &params.iDeblockMode);
    DEBUG_OUT_A("%d", hr);

    hr = NVSetParamValue(m_pEncoder, NVVE_PROFILE_LEVEL, &params.iProfileLevel);
    DEBUG_OUT_A("%d", hr);

    hr = NVSetParamValue(m_pEncoder, NVVE_FORCE_INTRA, &params.iForceIntra);
    DEBUG_OUT_A("%d", hr);

    hr = NVSetParamValue(m_pEncoder, NVVE_FORCE_IDR, &params.iForceIDR);
    DEBUG_OUT_A("%d", hr);

    hr = NVSetParamValue(m_pEncoder, NVVE_CLEAR_STAT, &params.iClearStat);
    DEBUG_OUT_A("%d", hr);

    hr = NVSetParamValue(m_pEncoder, NVVE_SET_DEINTERLACE, &params.DIMode);
    DEBUG_OUT_A("%d", hr);

    hr = NVSetParamValue(m_pEncoder, NVVE_PRESETS, &params.Presets);
    DEBUG_OUT_A("%d", hr);

    hr = NVSetParamValue(m_pEncoder, NVVE_DISABLE_CABAC, &params.iDisableCabac);
    DEBUG_OUT_A("%d", hr);

    hr = NVSetParamValue(m_pEncoder, NVVE_CONFIGURE_NALU_FRAMING_TYPE, &params.iNaluFramingType);
    DEBUG_OUT_A("%d", hr);

    hr = NVSetParamValue(m_pEncoder, NVVE_DISABLE_SPS_PPS, &params.iDisableSPSPPS);
    DEBUG_OUT_A("%d", hr);

    INT yes = 1;
    hr = NVSetParamValue(m_pEncoder, NVVE_DEVICE_MEMORY_INPUT, &yes);
    DEBUG_OUT_A("%d", hr);

    cudah::Init(NULL);
    cudah::cudah* c = new cudah::cudah("./chimera/ptx/NV12ToARGB_drvapi_x64.ptx");
    cudah::cuda_kernel kernel = c->GetKernel("NV12ToARGB_drvapi");
    cudah::GlobalPtr matPtr = c->GetGlobal("constHueColorSpaceMat");

    float hue = 0;
    float hueSin = sin(hue);
    float hueCos = cos(hue);
    float hueCSC[9];
        //CCIR 601
        hueCSC[0] = 1.1644f;
        hueCSC[1] = hueSin * 1.5960f;
        hueCSC[2] = hueCos * 1.5960f;
        hueCSC[3] = 1.1644f;
        hueCSC[4] = (hueCos * -0.3918f) - (hueSin * 0.8130f);
        hueCSC[5] = (hueSin *  0.3918f) - (hueCos * 0.8130f);
        hueCSC[6] = 1.1644f;
        hueCSC[7] = hueCos *  2.0172f;
        hueCSC[8] = hueSin * -2.0172f;

        CUDA_DRIVER_SAFE_CALLING(cuMemcpyHtoD(matPtr.ptr,
            reinterpret_cast<const void *>(hueCSC),
            matPtr.byteSize));

    DEBUG_OUT("\n");
    for(int i = 0; i < w*h*cmps; ++i)
    {
        data[i + 0] = 0;
    }
    std::string s("test");
    cudah::cuda_buffer b = c->CreateBuffer(s, w * h * sizeof(char) * cmps, data, cmps * sizeof(char));

    CUcontext cntx = c->GetContext();

    CUcontext cuContextCurr;
    cuCtxPopCurrent(&cuContextCurr);

    CUvideoctxlock cuCtxLock = 0;
    cuvidCtxLockCreate(&cuCtxLock, cntx);

    hr = NVSetParamValue(m_pEncoder, NVVE_DEVICE_CTX_LOCK, &cuCtxLock);
    DEBUG_OUT_A("%d", hr);

    NVVE_CallbackParams cbs;
    ZeroMemory(&cbs, sizeof(NVVE_CallbackParams));
    cbs.pfnacquirebitstream = NVDefault_HandleAcquireBitStream;
    cbs.pfnreleasebitstream = NVDefault_HandleReleaseBitStream;
    NVRegisterCB(m_pEncoder, cbs, NULL);

    hr = NVCreateHWEncoder(m_pEncoder);
    DEBUG_OUT_A("%d", hr);

    NVVE_EncodeFrameParams sFrameParams;
    ZeroMemory(&sFrameParams, sizeof(NVVE_EncodeFrameParams));
    sFrameParams.Pitch = w * cmps;
    sFrameParams.Width = w;
    sFrameParams.Height = h;
    sFrameParams.SurfFmt = IYUV;
    sFrameParams.PictureStruc = FRAME_PICTURE;

    hr = NVEncodeFrame(m_pEncoder, &sFrameParams, 0, (void*)b->ptr);
    DEBUG_OUT_A("%d", hr);

    CUvideodecoder decoder;
    CUVIDDECODECREATEINFO oVideoDecodeCreateInfo_;

    memset(&oVideoDecodeCreateInfo_, 0, sizeof(CUVIDDECODECREATEINFO));
    // Create video decoder
    oVideoDecodeCreateInfo_.CodecType           = cudaVideoCodec_H264;
    oVideoDecodeCreateInfo_.ulWidth             = w;
    oVideoDecodeCreateInfo_.ulHeight            = h;
    oVideoDecodeCreateInfo_.ulNumDecodeSurfaces = 1;

    oVideoDecodeCreateInfo_.ChromaFormat        = cudaVideoChromaFormat_420;
    oVideoDecodeCreateInfo_.OutputFormat        = cudaVideoSurfaceFormat_NV12;
    oVideoDecodeCreateInfo_.DeinterlaceMode     = cudaVideoDeinterlaceMode_Adaptive;

    // No scaling
    oVideoDecodeCreateInfo_.ulTargetWidth       = oVideoDecodeCreateInfo_.ulWidth;
    oVideoDecodeCreateInfo_.ulTargetHeight      = oVideoDecodeCreateInfo_.ulHeight;
    oVideoDecodeCreateInfo_.ulNumOutputSurfaces = 1;  // We won't simultaneously map more than 8 surfaces
    oVideoDecodeCreateInfo_.ulCreationFlags     = cudaVideoCreate_PreferCUDA;
    oVideoDecodeCreateInfo_.vidLock             = cuCtxLock;
    // create the decoder

    CUresult oResult = cuvidCreateDecoder(&decoder, &oVideoDecodeCreateInfo_);
    assert(CUDA_SUCCESS == oResult);

    CUVIDPARSERPARAMS oVideoParserParameters;
    memset(&oVideoParserParameters, 0, sizeof(CUVIDPARSERPARAMS));
    oVideoParserParameters.CodecType              = cudaVideoCodec_H264;
    oVideoParserParameters.ulMaxNumDecodeSurfaces = 1;
    oVideoParserParameters.ulMaxDisplayDelay      = 1;  // this flag is needed so the parser will push frames out to the decoder as quickly as it can
    oVideoParserParameters.pUserData              = decoder;
    oVideoParserParameters.pfnSequenceCallback    = NULL;    // Called before decoding frames and/or whenever there is a format change
    oVideoParserParameters.pfnDecodePicture       = HandleDecoding;    // Called when a picture is ready to be decoded (decode order)
    oVideoParserParameters.pfnDisplayPicture      = NULL;   // Called whenever a picture is ready to be displayed (display order)

    oResult = cuvidCreateVideoParser(&hParser_, &oVideoParserParameters);
    assert(CUDA_SUCCESS == oResult);

    CUVIDSOURCEPARAMS oVideoSourceParameters;
    // Fill parameter struct
    memset(&oVideoSourceParameters, 0, sizeof(CUVIDSOURCEPARAMS));
    oVideoSourceParameters.pUserData = NULL;               // will be passed to data handlers
    oVideoSourceParameters.pfnVideoDataHandler = HandleVideoData;   // our local video-handler callback
    oVideoSourceParameters.pfnAudioDataHandler = 0;

    CUvideosource hVideoSource_;
    oResult = cuvidCreateVideoSource(&hVideoSource_, "test.txt", &oVideoSourceParameters);
    assert(CUDA_SUCCESS == oResult);

    oResult = cuvidSetVideoSourceState(hVideoSource_, cudaVideoState_Started);
    assert(CUDA_SUCCESS == oResult);

    while(cuvidGetVideoSourceState(hVideoSource_) == cudaVideoState_Started) {}

    CUVIDPROCPARAMS oVideoProcessingParameters;
    memset(&oVideoProcessingParameters, 0, sizeof(CUVIDPROCPARAMS));

    oVideoProcessingParameters.progressive_frame = 1;
    oVideoProcessingParameters.second_field      = 0;
    oVideoProcessingParameters.top_field_first   = 0;
    oVideoProcessingParameters.unpaired_field    = 0;

    CUdeviceptr ptr;
    unsigned int nDecodedPitch = 0;
    oResult = cuvidMapVideoFrame(decoder, 0, &ptr, &nDecodedPitch, &oVideoProcessingParameters);
    assert(CUDA_SUCCESS == oResult);

    unsigned char* frameData;
    cuCtxPushCurrent(cntx);

    cudah::cuda_buffer dst = c->CreateBuffer(std::string("test2"), w * h * sizeof(char) * cmps, cmps * sizeof(char));
    VOID* args[] = {&ptr, &nDecodedPitch, &dst->ptr, &w, &w, &h};
    kernel->m_ppArgs = args;
    c->CallKernel(kernel);

    cuCtxSynchronize();

    oResult = cuMemAllocHost((void **)&frameData, w * h * cmps * sizeof(char));
    assert(CUDA_SUCCESS == oResult);
    oResult = cuMemcpyDtoH(frameData, dst->ptr, w * h * cmps * sizeof(char));
    assert(CUDA_SUCCESS == oResult);

    DEBUG_OUT("\n");
    for(int i = 0; i < w * h; ++i)
    {
        unsigned char c = frameData[i];
        DEBUG_OUT_A("%d\n", (int)c);
    }

    cuMemFreeHost(frameData);

    NVDestroyEncoder(m_pEncoder);
    cuvidDestroyDecoder(decoder);
    cuvidCtxLockDestroy(cuCtxLock);
    delete c;
    cudah::Destroy();
    delete[] data; */