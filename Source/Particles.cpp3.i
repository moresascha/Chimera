#line 1 "Particles.cudafe2.gpu"
#line 4 "e:\\dropbox\\visualstudio\\chimera\\source\\chimera\\Particles.cuh"
struct EmitterData;
#line 1 "Particles.cudafe1.gpu"
typedef char __nv_bool;
#line 428 "C:/Program Files (x86)/Microsoft Visual Studio 11.0/VC/include\\crtdefs.h"
typedef unsigned long long size_t;
#line 1 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v5.5/include\\crt/device_runtime.h"





































#line 1 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v5.5/include\\host_defines.h"
























































        








   


#line 70 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v5.5/include\\host_defines.h"
        



































































#line 139 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v5.5/include\\host_defines.h"










#line 150 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v5.5/include\\host_defines.h"






#line 157 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v5.5/include\\host_defines.h"




#line 162 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v5.5/include\\host_defines.h"










#line 174 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v5.5/include\\host_defines.h"


























#line 201 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v5.5/include\\host_defines.h"


#line 204 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v5.5/include\\host_defines.h"
#line 39 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v5.5/include\\crt/device_runtime.h"





typedef  unsigned long long __texture_type__;
typedef  unsigned long long __surface_type__;



#line 50 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v5.5/include\\crt/device_runtime.h"













#line 64 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v5.5/include\\crt/device_runtime.h"

















































































































































#line 210 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v5.5/include\\crt/device_runtime.h"

#line 1 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v5.5/include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\device_types.h"




















































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\host_defines.h"










































































































































































































#line 204 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\host_defines.h"
#line 54 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\device_types.h"







enum  cudaRoundMode
{
    cudaRoundNearest,
    cudaRoundZero,
    cudaRoundPosInf,
    cudaRoundMinInf
};

#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\device_types.h"
#line 57 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v5.5/include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\driver_types.h"




















































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\host_defines.h"










































































































































































































#line 204 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\host_defines.h"
#line 54 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\driver_types.h"



























































#line 114 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\driver_types.h"










enum  cudaError
{
    




    cudaSuccess                           =      0,
  
    



    cudaErrorMissingConfiguration         =      1,
  
    



    cudaErrorMemoryAllocation             =      2,
  
    



    cudaErrorInitializationError          =      3,
  
    







    cudaErrorLaunchFailure                =      4,
  
    






    cudaErrorPriorLaunchFailure           =      5,
  
    







    cudaErrorLaunchTimeout                =      6,
  
    






    cudaErrorLaunchOutOfResources         =      7,
  
    



    cudaErrorInvalidDeviceFunction        =      8,
  
    






    cudaErrorInvalidConfiguration         =      9,
  
    



    cudaErrorInvalidDevice                =     10,
  
    



    cudaErrorInvalidValue                 =     11,
  
    



    cudaErrorInvalidPitchValue            =     12,
  
    



    cudaErrorInvalidSymbol                =     13,
  
    


    cudaErrorMapBufferObjectFailed        =     14,
  
    


    cudaErrorUnmapBufferObjectFailed      =     15,
  
    



    cudaErrorInvalidHostPointer           =     16,
  
    



    cudaErrorInvalidDevicePointer         =     17,
  
    



    cudaErrorInvalidTexture               =     18,
  
    



    cudaErrorInvalidTextureBinding        =     19,
  
    




    cudaErrorInvalidChannelDescriptor     =     20,
  
    



    cudaErrorInvalidMemcpyDirection       =     21,
  
    







    cudaErrorAddressOfConstant            =     22,
  
    






    cudaErrorTextureFetchFailed           =     23,
  
    






    cudaErrorTextureNotBound              =     24,
  
    






    cudaErrorSynchronizationError         =     25,
  
    



    cudaErrorInvalidFilterSetting         =     26,
  
    



    cudaErrorInvalidNormSetting           =     27,
  
    





    cudaErrorMixedDeviceExecution         =     28,
  
    




    cudaErrorCudartUnloading              =     29,
  
    


    cudaErrorUnknown                      =     30,

    





    cudaErrorNotYetImplemented            =     31,
  
    






    cudaErrorMemoryValueTooLarge          =     32,
  
    




    cudaErrorInvalidResourceHandle        =     33,
  
    





    cudaErrorNotReady                     =     34,
  
    




    cudaErrorInsufficientDriver           =     35,
  
    










    cudaErrorSetOnActiveProcess           =     36,
  
    



    cudaErrorInvalidSurface               =     37,
  
    



    cudaErrorNoDevice                     =     38,
  
    



    cudaErrorECCUncorrectable             =     39,
  
    


    cudaErrorSharedObjectSymbolNotFound   =     40,
  
    


    cudaErrorSharedObjectInitFailed       =     41,
  
    



    cudaErrorUnsupportedLimit             =     42,
  
    



    cudaErrorDuplicateVariableName        =     43,
  
    



    cudaErrorDuplicateTextureName         =     44,
  
    



    cudaErrorDuplicateSurfaceName         =     45,
  
    







    cudaErrorDevicesUnavailable           =     46,
  
    


    cudaErrorInvalidKernelImage           =     47,
  
    





    cudaErrorNoKernelImageForDevice       =     48,
  
    










    cudaErrorIncompatibleDriverContext    =     49,
      
    




    cudaErrorPeerAccessAlreadyEnabled     =     50,
    
    




    cudaErrorPeerAccessNotEnabled         =     51,
    
    



    cudaErrorDeviceAlreadyInUse           =     54,

    




    cudaErrorProfilerDisabled             =     55,

    





    cudaErrorProfilerNotInitialized       =     56,

    




    cudaErrorProfilerAlreadyStarted       =     57,

    




     cudaErrorProfilerAlreadyStopped       =    58,

    





    cudaErrorAssert                        =    59,
  
    




    cudaErrorTooManyPeers                 =     60,
  
    



    cudaErrorHostMemoryAlreadyRegistered  =     61,
        
    



    cudaErrorHostMemoryNotRegistered      =     62,

    


    cudaErrorOperatingSystem              =     63,

    



    cudaErrorPeerAccessUnsupported        =     64,

    




    cudaErrorLaunchMaxDepthExceeded       =     65,

    





    cudaErrorLaunchFileScopedTex          =     66,

    





    cudaErrorLaunchFileScopedSurf         =     67,

    












    cudaErrorSyncDepthExceeded            =     68,

    









    cudaErrorLaunchPendingCountExceeded   =     69,
    
    


    cudaErrorNotPermitted                 =     70,

    



    cudaErrorNotSupported                 =     71,

    


    cudaErrorStartupFailure               =   0x7f,

    





    cudaErrorApiFailureBase               =  10000
};




enum  cudaChannelFormatKind
{
    cudaChannelFormatKindSigned           =   0,      
    cudaChannelFormatKindUnsigned         =   1,      
    cudaChannelFormatKindFloat            =   2,      
    cudaChannelFormatKindNone             =   3       
};




struct  cudaChannelFormatDesc
{
    int                        x; 
    int                        y; 
    int                        z; 
    int                        w; 
    enum cudaChannelFormatKind f; 
};




typedef struct cudaArray *cudaArray_t;




typedef const struct cudaArray *cudaArray_const_t;

struct cudaArray;




typedef struct cudaMipmappedArray *cudaMipmappedArray_t;




typedef const struct cudaMipmappedArray *cudaMipmappedArray_const_t;

struct cudaMipmappedArray;




enum  cudaMemoryType
{
    cudaMemoryTypeHost   = 1, 
    cudaMemoryTypeDevice = 2  
};




enum  cudaMemcpyKind
{
    cudaMemcpyHostToHost          =   0,      
    cudaMemcpyHostToDevice        =   1,      
    cudaMemcpyDeviceToHost        =   2,      
    cudaMemcpyDeviceToDevice      =   3,      
    cudaMemcpyDefault             =   4       
};





struct  cudaPitchedPtr
{
    void   *ptr;      
    size_t  pitch;    
    size_t  xsize;    
    size_t  ysize;    
};





struct  cudaExtent
{
    size_t width;     
    size_t height;    
    size_t depth;     
};





struct  cudaPos
{
    size_t x;     
    size_t y;     
    size_t z;     
};




struct  cudaMemcpy3DParms
{
    cudaArray_t            srcArray;  
    struct cudaPos         srcPos;    
    struct cudaPitchedPtr  srcPtr;    
  
    cudaArray_t            dstArray;  
    struct cudaPos         dstPos;    
    struct cudaPitchedPtr  dstPtr;    
  
    struct cudaExtent      extent;    
    enum cudaMemcpyKind    kind;      
};




struct  cudaMemcpy3DPeerParms
{
    cudaArray_t            srcArray;  
    struct cudaPos         srcPos;    
    struct cudaPitchedPtr  srcPtr;    
    int                    srcDevice; 
  
    cudaArray_t            dstArray;  
    struct cudaPos         dstPos;    
    struct cudaPitchedPtr  dstPtr;    
    int                    dstDevice; 
  
    struct cudaExtent      extent;    
};




struct cudaGraphicsResource;




enum  cudaGraphicsRegisterFlags
{
    cudaGraphicsRegisterFlagsNone             = 0,  
    cudaGraphicsRegisterFlagsReadOnly         = 1,   
    cudaGraphicsRegisterFlagsWriteDiscard     = 2,  
    cudaGraphicsRegisterFlagsSurfaceLoadStore = 4,  
    cudaGraphicsRegisterFlagsTextureGather    = 8   
};




enum  cudaGraphicsMapFlags
{
    cudaGraphicsMapFlagsNone         = 0,  
    cudaGraphicsMapFlagsReadOnly     = 1,  
    cudaGraphicsMapFlagsWriteDiscard = 2   
};




enum  cudaGraphicsCubeFace 
{
    cudaGraphicsCubeFacePositiveX = 0x00, 
    cudaGraphicsCubeFaceNegativeX = 0x01, 
    cudaGraphicsCubeFacePositiveY = 0x02, 
    cudaGraphicsCubeFaceNegativeY = 0x03, 
    cudaGraphicsCubeFacePositiveZ = 0x04, 
    cudaGraphicsCubeFaceNegativeZ = 0x05  
};




enum  cudaResourceType
{
    cudaResourceTypeArray          = 0x00, 
    cudaResourceTypeMipmappedArray = 0x01, 
    cudaResourceTypeLinear         = 0x02, 
    cudaResourceTypePitch2D        = 0x03  
};




enum  cudaResourceViewFormat
{
    cudaResViewFormatNone                      = 0x00, 
    cudaResViewFormatUnsignedChar1             = 0x01, 
    cudaResViewFormatUnsignedChar2             = 0x02, 
    cudaResViewFormatUnsignedChar4             = 0x03, 
    cudaResViewFormatSignedChar1               = 0x04, 
    cudaResViewFormatSignedChar2               = 0x05, 
    cudaResViewFormatSignedChar4               = 0x06, 
    cudaResViewFormatUnsignedShort1            = 0x07, 
    cudaResViewFormatUnsignedShort2            = 0x08, 
    cudaResViewFormatUnsignedShort4            = 0x09, 
    cudaResViewFormatSignedShort1              = 0x0a, 
    cudaResViewFormatSignedShort2              = 0x0b, 
    cudaResViewFormatSignedShort4              = 0x0c, 
    cudaResViewFormatUnsignedInt1              = 0x0d, 
    cudaResViewFormatUnsignedInt2              = 0x0e, 
    cudaResViewFormatUnsignedInt4              = 0x0f, 
    cudaResViewFormatSignedInt1                = 0x10, 
    cudaResViewFormatSignedInt2                = 0x11, 
    cudaResViewFormatSignedInt4                = 0x12, 
    cudaResViewFormatHalf1                     = 0x13, 
    cudaResViewFormatHalf2                     = 0x14, 
    cudaResViewFormatHalf4                     = 0x15, 
    cudaResViewFormatFloat1                    = 0x16, 
    cudaResViewFormatFloat2                    = 0x17, 
    cudaResViewFormatFloat4                    = 0x18, 
    cudaResViewFormatUnsignedBlockCompressed1  = 0x19, 
    cudaResViewFormatUnsignedBlockCompressed2  = 0x1a, 
    cudaResViewFormatUnsignedBlockCompressed3  = 0x1b, 
    cudaResViewFormatUnsignedBlockCompressed4  = 0x1c, 
    cudaResViewFormatSignedBlockCompressed4    = 0x1d, 
    cudaResViewFormatUnsignedBlockCompressed5  = 0x1e, 
    cudaResViewFormatSignedBlockCompressed5    = 0x1f, 
    cudaResViewFormatUnsignedBlockCompressed6H = 0x20, 
    cudaResViewFormatSignedBlockCompressed6H   = 0x21, 
    cudaResViewFormatUnsignedBlockCompressed7  = 0x22  
};




struct  cudaResourceDesc {
	enum cudaResourceType resType;             
	
	union {
		struct {
			cudaArray_t array;                 
		} array;
        struct {
            cudaMipmappedArray_t mipmap;       
        } mipmap;
		struct {
			void *devPtr;                      
			struct cudaChannelFormatDesc desc; 
			size_t sizeInBytes;                
		} linear;
		struct {
			void *devPtr;                      
			struct cudaChannelFormatDesc desc; 
			size_t width;                      
			size_t height;                     
			size_t pitchInBytes;               
		} pitch2D;
	} res;
};




struct  cudaResourceViewDesc
{
    enum cudaResourceViewFormat format;           
    size_t                      width;            
    size_t                      height;           
    size_t                      depth;            
    unsigned int                firstMipmapLevel; 
    unsigned int                lastMipmapLevel;  
    unsigned int                firstLayer;       
    unsigned int                lastLayer;        
};




struct  cudaPointerAttributes
{
    



    enum cudaMemoryType memoryType;

    








    int device;

    



    void *devicePointer;

    



    void *hostPointer;
};




struct  cudaFuncAttributes
{
   




   size_t sharedSizeBytes;

   



   size_t constSizeBytes;

   


   size_t localSizeBytes;

   




   int maxThreadsPerBlock;

   


   int numRegs;

   




   int ptxVersion;

   




   int binaryVersion;
};




enum  cudaFuncCache
{
    cudaFuncCachePreferNone   = 0,    
    cudaFuncCachePreferShared = 1,    
    cudaFuncCachePreferL1     = 2,    
    cudaFuncCachePreferEqual  = 3     
};





enum  cudaSharedMemConfig
{
    cudaSharedMemBankSizeDefault   = 0,
    cudaSharedMemBankSizeFourByte  = 1,
    cudaSharedMemBankSizeEightByte = 2
};




enum  cudaComputeMode
{
    cudaComputeModeDefault          = 0,  
    cudaComputeModeExclusive        = 1,  
    cudaComputeModeProhibited       = 2,  
    cudaComputeModeExclusiveProcess = 3   
};




enum  cudaLimit
{
    cudaLimitStackSize                    = 0x00, 
    cudaLimitPrintfFifoSize               = 0x01, 
    cudaLimitMallocHeapSize               = 0x02, 
    cudaLimitDevRuntimeSyncDepth          = 0x03, 
    cudaLimitDevRuntimePendingLaunchCount = 0x04  
};




enum  cudaOutputMode
{
    cudaKeyValuePair    = 0x00, 
    cudaCSV             = 0x01  
};




enum  cudaDeviceAttr
{
    cudaDevAttrMaxThreadsPerBlock             = 1,  
    cudaDevAttrMaxBlockDimX                   = 2,  
    cudaDevAttrMaxBlockDimY                   = 3,  
    cudaDevAttrMaxBlockDimZ                   = 4,  
    cudaDevAttrMaxGridDimX                    = 5,  
    cudaDevAttrMaxGridDimY                    = 6,  
    cudaDevAttrMaxGridDimZ                    = 7,  
    cudaDevAttrMaxSharedMemoryPerBlock        = 8,  
    cudaDevAttrTotalConstantMemory            = 9,  
    cudaDevAttrWarpSize                       = 10, 
    cudaDevAttrMaxPitch                       = 11, 
    cudaDevAttrMaxRegistersPerBlock           = 12, 
    cudaDevAttrClockRate                      = 13, 
    cudaDevAttrTextureAlignment               = 14, 
    cudaDevAttrGpuOverlap                     = 15, 
    cudaDevAttrMultiProcessorCount            = 16, 
    cudaDevAttrKernelExecTimeout              = 17, 
    cudaDevAttrIntegrated                     = 18, 
    cudaDevAttrCanMapHostMemory               = 19, 
    cudaDevAttrComputeMode                    = 20, 
    cudaDevAttrMaxTexture1DWidth              = 21, 
    cudaDevAttrMaxTexture2DWidth              = 22, 
    cudaDevAttrMaxTexture2DHeight             = 23, 
    cudaDevAttrMaxTexture3DWidth              = 24, 
    cudaDevAttrMaxTexture3DHeight             = 25, 
    cudaDevAttrMaxTexture3DDepth              = 26, 
    cudaDevAttrMaxTexture2DLayeredWidth       = 27, 
    cudaDevAttrMaxTexture2DLayeredHeight      = 28, 
    cudaDevAttrMaxTexture2DLayeredLayers      = 29, 
    cudaDevAttrSurfaceAlignment               = 30, 
    cudaDevAttrConcurrentKernels              = 31, 
    cudaDevAttrEccEnabled                     = 32, 
    cudaDevAttrPciBusId                       = 33, 
    cudaDevAttrPciDeviceId                    = 34, 
    cudaDevAttrTccDriver                      = 35, 
    cudaDevAttrMemoryClockRate                = 36, 
    cudaDevAttrGlobalMemoryBusWidth           = 37, 
    cudaDevAttrL2CacheSize                    = 38, 
    cudaDevAttrMaxThreadsPerMultiProcessor    = 39, 
    cudaDevAttrAsyncEngineCount               = 40, 
    cudaDevAttrUnifiedAddressing              = 41,     
    cudaDevAttrMaxTexture1DLayeredWidth       = 42, 
    cudaDevAttrMaxTexture1DLayeredLayers      = 43, 
    cudaDevAttrMaxTexture2DGatherWidth        = 45, 
    cudaDevAttrMaxTexture2DGatherHeight       = 46, 
    cudaDevAttrMaxTexture3DWidthAlt           = 47, 
    cudaDevAttrMaxTexture3DHeightAlt          = 48, 
    cudaDevAttrMaxTexture3DDepthAlt           = 49, 
    cudaDevAttrPciDomainId                    = 50, 
    cudaDevAttrTexturePitchAlignment          = 51, 
    cudaDevAttrMaxTextureCubemapWidth         = 52, 
    cudaDevAttrMaxTextureCubemapLayeredWidth  = 53, 
    cudaDevAttrMaxTextureCubemapLayeredLayers = 54, 
    cudaDevAttrMaxSurface1DWidth              = 55, 
    cudaDevAttrMaxSurface2DWidth              = 56, 
    cudaDevAttrMaxSurface2DHeight             = 57, 
    cudaDevAttrMaxSurface3DWidth              = 58, 
    cudaDevAttrMaxSurface3DHeight             = 59, 
    cudaDevAttrMaxSurface3DDepth              = 60, 
    cudaDevAttrMaxSurface1DLayeredWidth       = 61, 
    cudaDevAttrMaxSurface1DLayeredLayers      = 62, 
    cudaDevAttrMaxSurface2DLayeredWidth       = 63, 
    cudaDevAttrMaxSurface2DLayeredHeight      = 64, 
    cudaDevAttrMaxSurface2DLayeredLayers      = 65, 
    cudaDevAttrMaxSurfaceCubemapWidth         = 66, 
    cudaDevAttrMaxSurfaceCubemapLayeredWidth  = 67, 
    cudaDevAttrMaxSurfaceCubemapLayeredLayers = 68, 
    cudaDevAttrMaxTexture1DLinearWidth        = 69, 
    cudaDevAttrMaxTexture2DLinearWidth        = 70, 
    cudaDevAttrMaxTexture2DLinearHeight       = 71, 
    cudaDevAttrMaxTexture2DLinearPitch        = 72, 
    cudaDevAttrMaxTexture2DMipmappedWidth     = 73, 
    cudaDevAttrMaxTexture2DMipmappedHeight    = 74, 
    cudaDevAttrComputeCapabilityMajor         = 75,  
    cudaDevAttrComputeCapabilityMinor         = 76, 
    cudaDevAttrMaxTexture1DMipmappedWidth     = 77, 
    cudaDevAttrStreamPrioritiesSupported      = 78  
};




struct  cudaDeviceProp
{
    char   name[256];                  
    size_t totalGlobalMem;             
    size_t sharedMemPerBlock;          
    int    regsPerBlock;               
    int    warpSize;                   
    size_t memPitch;                   
    int    maxThreadsPerBlock;         
    int    maxThreadsDim[3];           
    int    maxGridSize[3];             
    int    clockRate;                  
    size_t totalConstMem;              
    int    major;                      
    int    minor;                      
    size_t textureAlignment;           
    size_t texturePitchAlignment;      
    int    deviceOverlap;              
    int    multiProcessorCount;        
    int    kernelExecTimeoutEnabled;   
    int    integrated;                 
    int    canMapHostMemory;           
    int    computeMode;                
    int    maxTexture1D;               
    int    maxTexture1DMipmap;         
    int    maxTexture1DLinear;         
    int    maxTexture2D[2];            
    int    maxTexture2DMipmap[2];      
    int    maxTexture2DLinear[3];      
    int    maxTexture2DGather[2];      
    int    maxTexture3D[3];            
    int    maxTexture3DAlt[3];         
    int    maxTextureCubemap;          
    int    maxTexture1DLayered[2];     
    int    maxTexture2DLayered[3];     
    int    maxTextureCubemapLayered[2];
    int    maxSurface1D;               
    int    maxSurface2D[2];            
    int    maxSurface3D[3];            
    int    maxSurface1DLayered[2];     
    int    maxSurface2DLayered[3];     
    int    maxSurfaceCubemap;          
    int    maxSurfaceCubemapLayered[2];
    size_t surfaceAlignment;           
    int    concurrentKernels;          
    int    ECCEnabled;                 
    int    pciBusID;                   
    int    pciDeviceID;                
    int    pciDomainID;                
    int    tccDriver;                  
    int    asyncEngineCount;           
    int    unifiedAddressing;          
    int    memoryClockRate;            
    int    memoryBusWidth;             
    int    l2CacheSize;                
    int    maxThreadsPerMultiProcessor;
    int    streamPrioritiesSupported;  
};




































































typedef  struct  cudaIpcEventHandle_st
{
    char reserved[64];
}cudaIpcEventHandle_t;




typedef  struct  cudaIpcMemHandle_st 
{
    char reserved[64];
}cudaIpcMemHandle_t;










typedef  enum cudaError cudaError_t;




typedef  struct CUstream_st *cudaStream_t;




typedef  struct CUevent_st *cudaEvent_t;




typedef  struct cudaGraphicsResource *cudaGraphicsResource_t;




typedef  struct CUuuid_st cudaUUID_t;




typedef  enum cudaOutputMode cudaOutputMode_t;


 

#line 1324 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\driver_types.h"

#line 58 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v5.5/include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\surface_types.h"


























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\driver_types.h"










































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1324 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\surface_types.h"
























enum  cudaSurfaceBoundaryMode
{
    cudaBoundaryModeZero  = 0,    
    cudaBoundaryModeClamp = 1,    
    cudaBoundaryModeTrap  = 2     
};




enum   cudaSurfaceFormatMode
{
    cudaFormatModeForced = 0,     
    cudaFormatModeAuto = 1        
};




struct  surfaceReference
{
    


    struct cudaChannelFormatDesc channelDesc;
};




typedef  unsigned long long cudaSurfaceObject_t;


 

#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\surface_types.h"
#line 59 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v5.5/include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\texture_types.h"


























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\driver_types.h"










































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1324 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\texture_types.h"
























enum  cudaTextureAddressMode
{
    cudaAddressModeWrap   = 0,    
    cudaAddressModeClamp  = 1,    
    cudaAddressModeMirror = 2,    
    cudaAddressModeBorder = 3     
};




enum  cudaTextureFilterMode
{
    cudaFilterModePoint  = 0,     
    cudaFilterModeLinear = 1      
};




enum  cudaTextureReadMode
{
    cudaReadModeElementType     = 0,  
    cudaReadModeNormalizedFloat = 1   
};




struct  textureReference
{
    


    int                          normalized;
    


    enum cudaTextureFilterMode   filterMode;
    


    enum cudaTextureAddressMode  addressMode[3];
    


    struct cudaChannelFormatDesc channelDesc;
    


    int                          sRGB;
    


    unsigned int                 maxAnisotropy;
    


    enum cudaTextureFilterMode   mipmapFilterMode;
    


    float                        mipmapLevelBias;
    


    float                        minMipmapLevelClamp;
    


    float                        maxMipmapLevelClamp;
    int                          __cudaReserved[15];
};




struct  cudaTextureDesc
{
    


    enum cudaTextureAddressMode addressMode[3];
    


    enum cudaTextureFilterMode  filterMode;
    


    enum cudaTextureReadMode    readMode;
    


    int                         sRGB;
    


    int                         normalizedCoords;
    


    unsigned int                maxAnisotropy;
    


    enum cudaTextureFilterMode  mipmapFilterMode;
    


    float                       mipmapLevelBias;
    


    float                       minMipmapLevelClamp;
    


    float                       maxMipmapLevelClamp;
};




typedef  unsigned long long cudaTextureObject_t;


 

#line 214 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\texture_types.h"
#line 60 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v5.5/include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\vector_types.h"



























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\driver_types.h"










































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1324 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\driver_types.h"

#line 58 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\surface_types.h"
#line 59 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\texture_types.h"




















































































































































































































#line 214 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\texture_types.h"
#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\vector_types.h"












































































































































































































































































































































































































































#line 430 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\vector_types.h"
#line 61 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\builtin_types.h"
#line 61 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\vector_types.h"
#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\vector_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\host_defines.h"










































































































































































































#line 204 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\host_defines.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\vector_types.h"






















#line 87 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\vector_types.h"







#line 95 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\vector_types.h"

struct  char1
{
    signed char x;
};

struct  uchar1
{
    unsigned char x;
};


struct  __attribute__((aligned(2))) char2
{
    signed char x, y;
};

struct  __attribute__((aligned(2))) uchar2
{
    unsigned char x, y;
};

struct  char3
{
    signed char x, y, z;
};

struct  uchar3
{
    unsigned char x, y, z;
};

struct  __attribute__((aligned(4))) char4
{
    signed char x, y, z, w;
};

struct  __attribute__((aligned(4))) uchar4
{
    unsigned char x, y, z, w;
};

struct  short1
{
    short x;
};

struct  ushort1
{
    unsigned short x;
};

struct  __attribute__((aligned(4))) short2
{
    short x, y;
};

struct  __attribute__((aligned(4))) ushort2
{
    unsigned short x, y;
};

struct  short3
{
    short x, y, z;
};

struct  ushort3
{
    unsigned short x, y, z;
};

struct  __attribute__((aligned(8))) short4 { short x; short y; short z; short w; };
struct  __attribute__((aligned(8))) ushort4 { unsigned short x; unsigned short y; unsigned short z; unsigned short w; };

struct  int1
{
    int x;
};

struct  uint1
{
    unsigned int x;
};

struct  __attribute__((aligned(8))) int2 { int x; int y; };
struct  __attribute__((aligned(8))) uint2 { unsigned int x; unsigned int y; };

struct  int3
{
    int x, y, z;
};

struct  uint3
{
    unsigned int x, y, z;
};

struct  __attribute__((aligned(16))) int4
{
    int x, y, z, w;
};

struct  __attribute__((aligned(16))) uint4
{
    unsigned int x, y, z, w;
};

struct  long1
{
    long int x;
};

struct  ulong1
{
    unsigned long x;
};


struct  __attribute__((aligned(8))) long2 { long int x; long int y; };
struct  __attribute__((aligned(8))) ulong2 { unsigned long int x; unsigned long int y; };












#line 229 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\vector_types.h"

struct  long3
{
    long int x, y, z;
};

struct  ulong3
{
    unsigned long int x, y, z;
};

struct  __attribute__((aligned(16))) long4
{
    long int x, y, z, w;
};

struct  __attribute__((aligned(16))) ulong4
{
    unsigned long int x, y, z, w;
};

struct  float1
{
    float x;
};















#line 271 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\vector_types.h"

struct  __attribute__((aligned(8))) float2 { float x; float y; };

#line 275 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\vector_types.h"


struct  float3
{
    float x, y, z;
};

struct  __attribute__((aligned(16))) float4
{
    float x, y, z, w;
};

struct  longlong1
{
    long long int x;
};

struct  ulonglong1
{
    unsigned long long int x;
};

struct  __attribute__((aligned(16))) longlong2
{
    long long int x, y;
};

struct  __attribute__((aligned(16))) ulonglong2
{
    unsigned long long int x, y;
};

struct  longlong3
{
    long long int x, y, z;
};

struct  ulonglong3
{
    unsigned long long int x, y, z;
};

struct  __attribute__((aligned(16))) longlong4
{
    long long int x, y, z ,w;
};

struct  __attribute__((aligned(16))) ulonglong4
{
    unsigned long long int x, y, z, w;
};

struct  double1
{
    double x;
};

struct  __attribute__((aligned(16))) double2
{
    double x, y;
};

struct  double3
{
    double x, y, z;
};

struct  __attribute__((aligned(16))) double4
{
    double x, y, z, w;
};





#line 353 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\vector_types.h"







typedef  struct char1 char1;
typedef  struct uchar1 uchar1;
typedef  struct char2 char2;
typedef  struct uchar2 uchar2;
typedef  struct char3 char3;
typedef  struct uchar3 uchar3;
typedef  struct char4 char4;
typedef  struct uchar4 uchar4;
typedef  struct short1 short1;
typedef  struct ushort1 ushort1;
typedef  struct short2 short2;
typedef  struct ushort2 ushort2;
typedef  struct short3 short3;
typedef  struct ushort3 ushort3;
typedef  struct short4 short4;
typedef  struct ushort4 ushort4;
typedef  struct int1 int1;
typedef  struct uint1 uint1;
typedef  struct int2 int2;
typedef  struct uint2 uint2;
typedef  struct int3 int3;
typedef  struct uint3 uint3;
typedef  struct int4 int4;
typedef  struct uint4 uint4;
typedef  struct long1 long1;
typedef  struct ulong1 ulong1;
typedef  struct long2 long2;
typedef  struct ulong2 ulong2;
typedef  struct long3 long3;
typedef  struct ulong3 ulong3;
typedef  struct long4 long4;
typedef  struct ulong4 ulong4;
typedef  struct float1 float1;
typedef  struct float2 float2;
typedef  struct float3 float3;
typedef  struct float4 float4;
typedef  struct longlong1 longlong1;
typedef  struct ulonglong1 ulonglong1;
typedef  struct longlong2 longlong2;
typedef  struct ulonglong2 ulonglong2;
typedef  struct longlong3 longlong3;
typedef  struct ulonglong3 ulonglong3;
typedef  struct longlong4 longlong4;
typedef  struct ulonglong4 ulonglong4;
typedef  struct double1 double1;
typedef  struct double2 double2;
typedef  struct double3 double3;
typedef  struct double4 double4;







struct  dim3
{
    unsigned int x, y, z;




#line 423 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\vector_types.h"
};

typedef  struct dim3 dim3;



#line 430 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\vector_types.h"
#line 61 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\builtin_types.h"
#line 212 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v5.5/include\\crt/device_runtime.h"
#line 1 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v5.5/include\\device_launch_parameters.h"




















































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\vector_types.h"












































































































































































































































































































































































































































#line 430 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\vector_types.h"
#line 54 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v5.5/include\\device_launch_parameters.h"






#line 61 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v5.5/include\\device_launch_parameters.h"



#line 65 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v5.5/include\\device_launch_parameters.h"

uint3  extern const threadIdx;
uint3  extern const blockIdx;
dim3  extern const blockDim;
dim3  extern const gridDim;
int  extern const warpSize;





#line 77 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v5.5/include\\device_launch_parameters.h"






#line 84 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v5.5/include\\device_launch_parameters.h"






#line 91 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v5.5/include\\device_launch_parameters.h"






#line 98 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v5.5/include\\device_launch_parameters.h"






#line 105 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v5.5/include\\device_launch_parameters.h"






#line 112 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v5.5/include\\device_launch_parameters.h"

#line 114 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v5.5/include\\device_launch_parameters.h"
#line 213 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v5.5/include\\crt/device_runtime.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\crt\\storage_class.h"










































#line 44 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\crt\\storage_class.h"






#line 51 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\crt\\storage_class.h"



#line 55 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\crt\\storage_class.h"



#line 59 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\crt\\storage_class.h"



#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\crt\\storage_class.h"



#line 67 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\crt\\storage_class.h"



#line 71 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\crt\\storage_class.h"



#line 75 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\crt\\storage_class.h"



#line 79 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\crt\\storage_class.h"



#line 83 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\crt\\storage_class.h"



#line 87 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\crt\\storage_class.h"



#line 91 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\crt\\storage_class.h"



#line 95 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\crt\\storage_class.h"



#line 99 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\crt\\storage_class.h"



#line 103 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\crt\\storage_class.h"



#line 107 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\crt\\storage_class.h"



#line 111 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\crt\\storage_class.h"



#line 115 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\crt\\storage_class.h"



#line 119 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\crt\\storage_class.h"



#line 123 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\crt\\storage_class.h"



#line 127 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\crt\\storage_class.h"



#line 131 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\crt\\storage_class.h"



#line 135 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\crt\\storage_class.h"



#line 139 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\crt\\storage_class.h"



#line 143 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\crt\\storage_class.h"



#line 147 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\crt\\storage_class.h"

#line 149 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\crt\\storage_class.h"
#line 214 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v5.5/include\\crt/device_runtime.h"
#line 430 "C:/Program Files (x86)/Microsoft Visual Studio 11.0/VC/include\\crtdefs.h"
#line 2 "e:\\dropbox\\visualstudio\\chimera\\source\\chimera\\Particles.cuh"
typedef unsigned UINT;
#line 4 "e:\\dropbox\\visualstudio\\chimera\\source\\chimera\\Particles.cuh"
struct EmitterData {
#line 6 "e:\\dropbox\\visualstudio\\chimera\\source\\chimera\\Particles.cuh"
float rand;
#line 7 "e:\\dropbox\\visualstudio\\chimera\\source\\chimera\\Particles.cuh"
float birthTime;
#line 8 "e:\\dropbox\\visualstudio\\chimera\\source\\chimera\\Particles.cuh"
float time;
#line 9 "e:\\dropbox\\visualstudio\\chimera\\source\\chimera\\Particles.cuh"
float tmp;};
#line 322 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
typedef struct float4 Plane;
#line 384 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
typedef struct float3 (*function)(struct float3, struct float3);



#line 389 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"



#line 393 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"



#line 397 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"



#line 401 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
#line 239 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\vector_functions.h"
static  __inline__ struct float3 _ZN39_INTERNAL_17_Particles_cpp1_ii_610dbc6511make_float3Efff(float, float, float);
#line 244 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\vector_functions.h"
static  __inline__ struct float4 _ZN39_INTERNAL_17_Particles_cpp1_ii_610dbc6511make_float4Effff(float, float, float, float);
#line 2631 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\texture_fetch_functions.h"
static  __inline__ __attribute__((always_inline)) struct float4 _ZN39_INTERNAL_17_Particles_cpp1_ii_610dbc655tex3DE7textureI6float4Li3EL19cudaTextureReadMode0EEfff(__attribute__((__texture__)) __texture_type__, float, float, float);
#line 127 "../include\\cutil_math.h"
extern  __inline__ struct float3 _Z11make_float36float4(struct float4);
#line 254 "../include\\cutil_math.h"
extern  __inline__ struct float3 _ZngR6float3(struct float3 *);
#line 343 "../include\\cutil_math.h"
extern  __inline__ void _ZpLR6float3S_(struct float3 *, struct float3);
#line 738 "../include\\cutil_math.h"
extern  __inline__ void _ZmLR6float3f(struct float3 *, float);
#line 801 "../include\\cutil_math.h"
extern  __inline__ void _ZmLR6float4f(struct float4 *, float);
#line 922 "../include\\cutil_math.h"
extern  __inline__ struct float3 _Z5fminf6float3S_(struct float3, struct float3);
#line 965 "../include\\cutil_math.h"
extern  __inline__ struct float3 _Z5fmaxf6float3S_(struct float3, struct float3);
#line 1123 "../include\\cutil_math.h"
extern  __inline__ float _Z3dot6float3S_(struct float3, struct float3);
#line 21 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
extern  int _Z5IsOutP6float4P6float3S2_(struct float4 *, struct float3 *, struct float3 *);
#line 29 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
extern  __nv_bool _Z7IsAliveP6float4(struct float4 *);
#line 34 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
extern  __nv_bool _Z7WasDeadP6float4(struct float4 *);
#line 324 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
extern  float _Z11getDistance6float4S_(Plane, struct float4);
#line 329 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
extern  __nv_bool _Z9isOutside6float4S_(Plane, struct float4);
#line 354 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
extern  void _Z7_reduceIPF6float3S0_S0_EEvP6float4PS0_T_(struct float4 *, struct float3 *, function);
#line 39 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
__attribute__((global)) __attribute__((__used__)) extern void _computeEmitter(struct float4 *, struct float4 *, struct float3 *, struct float3 *, struct EmitterData *, struct float3, float, float, float, float, UINT);
#line 129 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
__attribute__((global)) __attribute__((__used__)) extern void _computeGravity(struct float4 *, struct float3 *, float);
#line 151 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
__attribute__((global)) __attribute__((__used__)) extern void _computeTurbulence(struct float4 *, struct float3 *, struct float3 *, UINT, UINT);
#line 177 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
__attribute__((global)) __attribute__((__used__)) extern void _integrate(struct float4 *, struct float3 *, struct float3 *, float);
#line 206 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
__attribute__((global)) __attribute__((__used__)) extern void _computeGradientField(struct float4 *, struct float3 *, struct float4);
#line 253 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
__attribute__((global)) __attribute__((__used__)) extern void _computeGravityField(struct float4 *, struct float3 *, struct float4, int, float);
#line 291 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
__attribute__((global)) __attribute__((__used__)) extern void _computeVelocityDamping(struct float4 *, struct float3 *, float);
#line 334 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
__attribute__((global)) __attribute__((__used__)) extern void _computePlane(Plane, struct float3 *, struct float4 *);
#line 386 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
__attribute__((global)) __attribute__((__used__)) extern void _reduce_max4(struct float4 *, struct float3 *);
#line 391 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
__attribute__((global)) __attribute__((__used__)) extern void _reduce_min4(struct float4 *, struct float3 *);
#line 19 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
static  __attribute__((__texture__))  __attribute__((__used__)) __texture_type__ ct_gradientTexture;
#line 356 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
extern  __attribute__((shared)) struct float3 s_d[];
#line 1 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v5.5/include\\common_functions.h"



























































































































































#line 157 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v5.5/include\\common_functions.h"








#line 166 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v5.5/include\\common_functions.h"

#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\math_functions.h"
















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 8242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\math_functions.h"

#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\host_defines.h"










































































































































































































#line 204 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\host_defines.h"
#line 8244 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\math_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\math_constants.h"



























































































#line 93 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\math_constants.h"
















#line 110 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\math_constants.h"

























































#line 168 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\math_constants.h"
#line 8245 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\math_functions.h"







#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\device_functions_decls.h"
































































float __nv_fast_sinf(float x);












float __nv_fast_cosf(float x);


























float __nv_fast_log2f(float x);














float __nv_fast_tanf(float x);















void __nv_fast_sincosf(float x, float *sptr, float *cptr);


















































float __nv_fast_expf(float x);
































float __nv_fast_exp10f(float x);




























float __nv_fast_log10f(float x);












































float __nv_fast_logf(float x);











































float __nv_fast_powf(float x, float y);












int __nv_hadd(int x, int y);













int __nv_rhadd(int x, int y);












unsigned int __nv_uhadd(unsigned int x, unsigned int y);













unsigned int __nv_urhadd(unsigned int x, unsigned int y);












float __nv_fsub_rn (float x, float y);












float __nv_fsub_rz (float x, float y);












float __nv_fsub_rd (float x, float y);












float __nv_fsub_ru (float x, float y);







































float __nv_frsqrt_rn (float x);











int __nv_ffs(int x);











int __nv_ffsll(long long int x);











float __nv_rintf(float x);












long long int __nv_llrintf(float x);

















































float __nv_nearbyintf(float x);












int __nv_signbitf(float x);









float __nv_copysignf(float x, float y);










int __nv_finitef(float x);












int __nv_isinff(float x);











int __nv_isnanf(float x);
































float __nv_nextafterf(float x, float y);












float __nv_nanf(const signed char *tagp);









































float __nv_sinf(float x);

































float __nv_cosf(float x);















void __nv_sincosf(float x, float *sptr, float *cptr);




























































float __nv_sinpif(float x);




















































float __nv_cospif(float x);






























void __nv_sincospif(float x, float *sptr, float *cptr);









































float __nv_tanf(float x);



















































float __nv_log2f(float x);







































float __nv_expf(float x);





















float __nv_exp10f(float x);































float __nv_coshf(float x);






























float __nv_sinhf(float x);






























float __nv_tanhf(float x);

































float __nv_atan2f(float x, float y);































float __nv_atanf(float x);
































float __nv_asinf(float x);























float __nv_acosf(float x);







































































float __nv_logf(float x);



















































float __nv_log10f(float x);





























































































float __nv_log1pf(float x);


































float __nv_acoshf(float x);












float __nv_asinhf(float x);


















































float __nv_atanhf(float x);









































float __nv_expm1f(float x);







































float __nv_hypotf(float x, float y);


















































































float __nv_cbrtf(float x);

















































float __nv_rcbrtf(float x);






































float __nv_j0f(float x);

























































float __nv_j1f(float x);
















































float __nv_y0f(float x);
















































float __nv_y1f(float x);

















































float __nv_ynf(int n, float x);







































float __nv_jnf(int n, float x);














































































float __nv_erff(float x);

























































float __nv_erfinvf(float x);


































float __nv_erfcf(float x);











































































float __nv_erfcxf(float x);
























































float __nv_erfcinvf(float x);


























































float __nv_normcdfinvf(float x);











































float __nv_normcdff(float x);




























































































































float __nv_lgammaf(float x);
























































float __nv_ldexpf(float x, int y);








































































float __nv_scalbnf(float x, int y);











































































float __nv_frexpf(float x, int *b);
























































float __nv_modff(float x, float *b);



























































float __nv_fmodf(float x, float y);





















































































float __nv_remainderf(float x, float y);


















































float __nv_remquof(float x, float y, int* quo);


























































































































































float __nv_fmaf(float x, float y, float z);




















































































































































































































































































































float __nv_powif(float x, int y);




















































































































































































































































































































double __nv_powi(double x, int y);




















































































































































































































































































































float __nv_powf(float x, float y);









































































































float __nv_tgammaf(float x);













float __nv_roundf(float x);














long long int __nv_llroundf(float x);






















float __nv_fdimf(float x, float y);


























int __nv_ilogbf(float x);



















































float __nv_logbf(float x);











double __nv_rint(double x);












long long int __nv_llrint(double x);

















































double __nv_nearbyint(double x);












int __nv_signbitd(double x);












int __nv_isfinited(double x);












int __nv_isinfd(double x);











int __nv_isnand(double x);









double __nv_copysign(double x, double y);















void __nv_sincos(double x, double *sptr, double *cptr);






























void __nv_sincospi(double x, double *sptr, double *cptr);









































double __nv_sin(double x);

































double __nv_cos(double x);




























































double __nv_sinpi(double x);




















































double __nv_cospi(double x);









































double __nv_tan(double x);







































































double __nv_log(double x);



















































double __nv_log2(double x);



















































double __nv_log10(double x);





























































































double __nv_log1p(double x);







































double __nv_exp(double x);





















double __nv_exp2(double x);





















double __nv_exp10(double x);









































double __nv_expm1(double x);































double __nv_cosh(double x);






























double __nv_sinh(double x);






























double __nv_tanh(double x);

































double __nv_atan2(double x, double y);































double __nv_atan(double x);
































double __nv_asin(double x);























double __nv_acos(double x);


































double __nv_acosh(double x);












double __nv_asinh(double x);


















































double __nv_atanh(double x);







































double __nv_hypot(double x, double y);


















































































double __nv_cbrt(double x);

















































double __nv_rcbrt(double x);




















































































































































































































































































































double __nv_pow(double x, double y);






































double __nv_j0(double x);

























































double __nv_j1(double x);
















































double __nv_y0(double x);
















































double __nv_y1(double x);

















































double __nv_yn(int n, double x);







































double __nv_jn(int n, double x);














































































double __nv_erf(double x);

























































double __nv_erfinv(double x);
























































double __nv_erfcinv(double x);


























































double __nv_normcdfinv(double x);


































double __nv_erfc(double x);











































































double __nv_erfcx(double x);











































double __nv_normcdf(double x);









































































































double __nv_tgamma(double x);




























































































































double __nv_lgamma(double x);
























































double __nv_ldexp(double x, int y);








































































double __nv_scalbn(double x, int y);











































































double __nv_frexp(double x, int *b);
























































double __nv_modf(double x, double *b);



























































double __nv_fmod(double x, double y);





















































































double __nv_remainder(double x, double y);


















































double __nv_remquo(double x, double y, int *c);
































double __nv_nextafter(double x, double y);












double __nv_nan(const signed char *tagp);













double __nv_round(double x);














long long int __nv_llround(double x);






















double __nv_fdim(double x, double y);


























int __nv_ilogb(double x);



















































double __nv_logb(double x);


























































































































































double __nv_fma(double x, double y, double z);









int __nv_clz(int x);








int __nv_clzll(long long x);









int __nv_popc(int x);








int __nv_popcll(long long x);
























unsigned int __nv_byte_perm(unsigned int x, unsigned int y, unsigned int z);










int __nv_min(int x, int y);









unsigned int __nv_umin(unsigned int x, unsigned int y);









long long __nv_llmin(long long x, long long y);









unsigned long long __nv_ullmin(unsigned long long x, unsigned long long y);
    









int __nv_max(int x, int y);









unsigned int __nv_umax(unsigned int x, unsigned int y);









long long __nv_llmax(long long x, long long y);









unsigned long long __nv_ullmax(unsigned long long x, unsigned long long y);










int __nv_mulhi(int x, int y);









unsigned int __nv_umulhi(unsigned int x, unsigned int y);









long long __nv_mul64hi(long long x, long long y);









unsigned long long __nv_umul64hi(unsigned long long x, unsigned long long y);










int __nv_mul24(int x, int y);









unsigned int __nv_umul24(unsigned int x, unsigned int y);









unsigned int __nv_brev(unsigned int x);
    








unsigned long long __nv_brevll(unsigned long long x);




































































int __nv_sad(int x, int y, int z);




































































unsigned int __nv_usad(unsigned int x, unsigned int y, unsigned int z);









int __nv_abs(int x);










long long __nv_llabs(long long x);








































































float __nv_floorf(float f);








































































double __nv_floor(double f);









































float __nv_fabsf(float f);









































double __nv_fabs(double f);


double __nv_rcp64h(double d);
















float __nv_fminf(float x, float y);
















float __nv_fmaxf(float x, float y);





































































float __nv_rsqrtf(float x);
















double __nv_fmin(double x, double y);
















double __nv_fmax(double x, double y);





































































double __nv_rsqrt(double x);



























































double __nv_ceil(double x);











double __nv_trunc(double x);





















float __nv_exp2f(float x);











float __nv_truncf(float x);



























































float __nv_ceilf(float x);























float __nv_saturatef(float x);

























































































































































float __nv_fmaf_rn(float x, float y, float z);
























































































































































float __nv_fmaf_rz(float x, float y, float z);
























































































































































float __nv_fmaf_rd(float x, float y, float z);
























































































































































float __nv_fmaf_ru(float x, float y, float z);


float __nv_fmaf_ieee_rn(float x, float y, float z);

float __nv_fmaf_ieee_rz(float x, float y, float z);

float __nv_fmaf_ieee_rd(float x, float y, float z);

float __nv_fmaf_ieee_ru(float x, float y, float z);





























































































































































double __nv_fma_rn(double x, double y, double z);




























































































































































double __nv_fma_rz(double x, double y, double z);




























































































































































double __nv_fma_rd(double x, double y, double z);




























































































































































double __nv_fma_ru(double x, double y, double z);











































































float __nv_fast_fdividef(float x, float y);











float __nv_fdiv_rn(float x, float y);










float __nv_fdiv_rz(float x, float y);










float __nv_fdiv_rd(float x, float y);










float __nv_fdiv_ru(float x, float y);

































float __nv_frcp_rn(float x);
































float __nv_frcp_rz(float x);
































float __nv_frcp_rd(float x);
































float __nv_frcp_ru(float x);































float __nv_fsqrt_rn(float x);






























float __nv_fsqrt_rz(float x);






























float __nv_fsqrt_rd(float x);






























float __nv_fsqrt_ru(float x);












double __nv_ddiv_rn(double x, double y);











double __nv_ddiv_rz(double x, double y);











double __nv_ddiv_rd(double x, double y);











double __nv_ddiv_ru(double x, double y);


































double __nv_drcp_rn(double x);

































double __nv_drcp_rz(double x);

































double __nv_drcp_rd(double x);

































double __nv_drcp_ru(double x);
































double __nv_dsqrt_rn(double x);
































double __nv_dsqrt_rz(double x);































double __nv_dsqrt_rd(double x);































double __nv_dsqrt_ru(double x);





































































float __nv_sqrtf(float x);





































































double __nv_sqrt(double x);












double __nv_dadd_rn(double x, double y);











double __nv_dadd_rz(double x, double y);











double __nv_dadd_rd(double x, double y);











double __nv_dadd_ru(double x, double y);












double __nv_dmul_rn(double x, double y);











double __nv_dmul_rz(double x, double y);











double __nv_dmul_rd(double x, double y);











double __nv_dmul_ru(double x, double y);












float __nv_fadd_rd(float x, float y);











float __nv_fadd_ru(float x, float y);












float __nv_fmul_rd(float x, float y);











float __nv_fmul_ru(float x, float y);












float __nv_fadd_rn(float x, float y);











float __nv_fadd_rz(float x, float y);












float __nv_fmul_rn(float x, float y);











float __nv_fmul_rz(float x, float y);









float __nv_double2float_rn(double d);








float __nv_double2float_rz(double d);








float __nv_double2float_rd(double d);








float __nv_double2float_ru(double d);
    








int __nv_double2int_rn(double d);








int __nv_double2int_rz(double d);








int __nv_double2int_rd(double d);








int __nv_double2int_ru(double d);









unsigned int __nv_double2uint_rn(double d);








unsigned int __nv_double2uint_rz(double d);








unsigned int __nv_double2uint_rd(double d);








unsigned int __nv_double2uint_ru(double d);








double __nv_int2double_rn(int i);








double __nv_uint2double_rn(unsigned int i);









int __nv_float2int_rn(float in);








int __nv_float2int_rz(float in);








int __nv_float2int_rd(float in);








int __nv_float2int_ru(float in);








unsigned int __nv_float2uint_rn(float in);








unsigned int __nv_float2uint_rz(float in);








unsigned int __nv_float2uint_rd(float in);








unsigned int __nv_float2uint_ru(float in);









float __nv_int2float_rn(int in);








float __nv_int2float_rz(int in);








float __nv_int2float_rd(int in);








float __nv_int2float_ru(int in);









float __nv_uint2float_rn(unsigned int in);








float __nv_uint2float_rz(unsigned int in);








float __nv_uint2float_rd(unsigned int in);








float __nv_uint2float_ru(unsigned int in);










double __nv_hiloint2double(int x, int y);








int __nv_double2loint(double d);








int __nv_double2hiint(double d);









long long __nv_float2ll_rn(float f);








long long __nv_float2ll_rz(float f);








long long __nv_float2ll_rd(float f);








long long __nv_float2ll_ru(float f);








unsigned long long __nv_float2ull_rn(float f);








unsigned long long __nv_float2ull_rz(float f);








unsigned long long __nv_float2ull_rd(float f);








unsigned long long __nv_float2ull_ru(float f);









long long __nv_double2ll_rn(double f);








long long __nv_double2ll_rz(double f);








long long __nv_double2ll_rd(double f);








long long __nv_double2ll_ru(double f);









unsigned long long __nv_double2ull_rn(double f);








unsigned long long __nv_double2ull_rz(double f);








unsigned long long __nv_double2ull_rd(double f);








unsigned long long __nv_double2ull_ru(double f);









float __nv_ll2float_rn(long long l);








float __nv_ll2float_rz(long long l);








float __nv_ll2float_rd(long long l);








float __nv_ll2float_ru(long long l);









float __nv_ull2float_rn(unsigned long long l);








float __nv_ull2float_rz(unsigned long long l);








float __nv_ull2float_rd(unsigned long long l);








float __nv_ull2float_ru(unsigned long long l);









double __nv_ll2double_rn(long long l);








double __nv_ll2double_rz(long long l);








double __nv_ll2double_rd(long long l);








double __nv_ll2double_ru(long long l);









double __nv_ull2double_rn(unsigned long long l);








double __nv_ull2double_rz(unsigned long long l);








double __nv_ull2double_rd(unsigned long long l);








double __nv_ull2double_ru(unsigned long long l);









unsigned short __nv_float2half_rn(float f);








float __nv_half2float(unsigned short h);








float __nv_int_as_float(int x);









int __nv_float_as_int(float x);
    








double __nv_longlong_as_double(long long x);









long long  __nv_double_as_longlong (double x);

#line 11714 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\device_functions_decls.h"

#line 8253 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\math_functions.h"
#line 8254 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\math_functions.h"

#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\device_functions.h"






















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 2424 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\device_functions.h"








static __inline__ __attribute__((always_inline)) int __syncthreads_count(int predicate)
{
  return __nvvm_bar0_popc(predicate);
}

static __inline__ __attribute__((always_inline)) int __syncthreads_and(int predicate)
{
  return __nvvm_bar0_and(predicate);
}

static __inline__ __attribute__((always_inline)) int __syncthreads_or(int predicate)
{
  return __nvvm_bar0_or(predicate);
}






static __inline__ __attribute__((always_inline)) void __threadfence_block()
{
  __nvvm_membar_cta();
}

static __inline__ __attribute__((always_inline)) void __threadfence()
{
  __nvvm_membar_gl();
}

static __inline__ __attribute__((always_inline)) void __threadfence_system()
{
  __nvvm_membar_sys();
}






static __inline__ __attribute__((always_inline)) int __all(int a)
{
  int result;
  asm __volatile__ ("{ \n\t"
        ".reg .pred \t%%p1; \n\t"
        ".reg .pred \t%%p2; \n\t"
        "setp.ne.u32 \t%%p1, %1, 0; \n\t"
        "vote.all.pred \t%%p2, %%p1; \n\t"
        "selp.s32 \t%0, 1, 0, %%p2; \n\t"
        "}" : "=r"(result) : "r"(a));
  return result;
}

static __inline__ __attribute__((always_inline)) int __any(int a)
{
  int result;
  asm __volatile__ ("{ \n\t"
        ".reg .pred \t%%p1; \n\t"
        ".reg .pred \t%%p2; \n\t"
        "setp.ne.u32 \t%%p1, %1, 0; \n\t"
        "vote.any.pred \t%%p2, %%p1; \n\t"
        "selp.s32 \t%0, 1, 0, %%p2; \n\t"
        "}" : "=r"(result) : "r"(a));
  return result;
}

static __inline__ __attribute__((always_inline)) int __ballot(int a)
{
  int result;
  asm __volatile__ ("{ \n\t"
        ".reg .pred \t%%p1; \n\t"
        "setp.ne.u32 \t%%p1, %1, 0; \n\t"
        "vote.ballot.b32 \t%0, %%p1; \n\t"
        "}" : "=r"(result) : "r"(a));
  return result;
}






static __inline__ __attribute__((always_inline)) void __brkpt()
{
  asm __volatile__ ("brkpt;");
}

static __inline__ __attribute__((always_inline)) int clock()
{
  int r;
  asm __volatile__ ("mov.u32 \t%0, %%clock;" : "=r"(r));
  return r;
}

static __inline__ __attribute__((always_inline)) long long clock64()
{
  long long z;
  asm __volatile__ ("mov.u64 \t%0, %%clock64;" : "=l"(z));
  return z;
}
    


static __inline__ __attribute__((always_inline)) unsigned int __pm0(void)
{
  unsigned int r;
  asm("mov.u32 \t%0, %%pm0;" : "=r"(r));
  return r;
}

static __inline__ __attribute__((always_inline)) unsigned int __pm1(void)
{
  unsigned int r;
  asm("mov.u32 \t%0, %%pm1;" : "=r"(r));
  return r;
}

static __inline__ __attribute__((always_inline)) unsigned int __pm2(void)
{
  unsigned int r;
  asm("mov.u32 \t%0, %%pm2;" : "=r"(r));
  return r;
}

static __inline__ __attribute__((always_inline)) unsigned int __pm3(void)
{
  unsigned int r;
  asm("mov.u32 \t%0, %%pm3;" : "=r"(r));
  return r;
}

static __inline__ __attribute__((always_inline)) void __trap(void)
{
  asm __volatile__ ("trap;");
}

static __inline__ __attribute__((always_inline)) void* memcpy(void *dest, const void *src, size_t n)
{
  __nvvm_memcpy((unsigned char *)dest, (unsigned char *)src, n, 
                 1);
  return dest;
}

static __inline__ __attribute__((always_inline)) void* memset(void *dest, int c, size_t n)
{
  __nvvm_memset((unsigned char *)dest, (unsigned char)c, n, 
                1);
  return dest;
}






static __inline__ __attribute__((always_inline)) int __clz(int x)
{
  return __nv_clz(x);
}

static __inline__ __attribute__((always_inline)) int __clzll(long long x)
{
  return __nv_clzll(x);
}

static __inline__ __attribute__((always_inline)) int __popc(int x)
{
  return __nv_popc(x);
}

static __inline__ __attribute__((always_inline)) int __popcll(long long x)
{
  return __nv_popcll(x);
}

static __inline__ __attribute__((always_inline)) unsigned int __byte_perm(unsigned int a,
                                                unsigned int b,
                                                unsigned int c)
{
  return __nv_byte_perm(a, b, c);
}






static __inline__ __attribute__((always_inline)) int min(int x, int y)
{
  return __nv_min(x, y);
}

static __inline__ __attribute__((always_inline)) unsigned int umin(unsigned int x, unsigned int y)
{
  return __nv_umin(x, y);
}
    
static __inline__ __attribute__((always_inline)) long long llmin(long long x, long long y)
{
  return __nv_llmin(x, y);
}

static __inline__ __attribute__((always_inline)) unsigned long long ullmin(unsigned long long x,
                                                 unsigned long long y)
{
  return __nv_ullmin(x, y);
}
    
static __inline__ __attribute__((always_inline)) int max(int x, int y)
{
  return __nv_max(x, y);
}

static __inline__ __attribute__((always_inline)) unsigned int umax(unsigned int x, unsigned int y)
{
  return __nv_umax(x, y);
}
    
static __inline__ __attribute__((always_inline)) long long llmax(long long x, long long y)
{
  return __nv_llmax(x, y);
}

static __inline__ __attribute__((always_inline)) unsigned long long ullmax(unsigned long long x,
                                                 unsigned long long y)
{
  return __nv_ullmax(x, y);
}

static __inline__ __attribute__((always_inline)) int __mulhi(int x, int y)
{
  return __nv_mulhi(x, y);
}

static __inline__ __attribute__((always_inline)) unsigned int __umulhi(unsigned int x, unsigned int y)
{
  return __nv_umulhi(x, y);
}

static __inline__ __attribute__((always_inline)) long long __mul64hi(long long x, long long y)
{
  return __nv_mul64hi(x, y);
}

static __inline__ __attribute__((always_inline)) unsigned long long __umul64hi(unsigned long long x,
                                                     unsigned long long y)
{
  return __nv_umul64hi(x, y);
}

static __inline__ __attribute__((always_inline)) int __mul24(int x, int y)
{
  return __nv_mul24(x, y);
}

static __inline__ __attribute__((always_inline)) unsigned int __umul24(unsigned int x, unsigned int y)
{
  return __nv_umul24(x, y);
}

static __inline__ __attribute__((always_inline)) unsigned int __brev(unsigned int x)
{
  return __nv_brev(x);
}
    
static __inline__ __attribute__((always_inline)) unsigned long long __brevll(unsigned long long x)
{
  return __nv_brevll(x);
}
    
static __inline__ __attribute__((always_inline)) int __sad(int x, int y, int z)
{
  return __nv_sad(x, y, z);
}

static __inline__ __attribute__((always_inline)) unsigned int __usad(unsigned int x,
                                           unsigned int y,
                                           unsigned int z)
{
  return __nv_usad(x, y, z);
}

static __inline__ __attribute__((always_inline)) int abs(int x)
{
  return __nv_abs(x);
}

static __inline__ __attribute__((always_inline)) long labs(long x)
{


#line 2724 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\device_functions.h"
  return __nv_abs((int) x);
#line 2726 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\device_functions.h"
}

static __inline__ __attribute__((always_inline)) long long llabs(long long x)
{
  return __nv_llabs(x);
}






static __inline__ __attribute__((always_inline)) float floorf(float f)
{
  return __nv_floorf(f);
}

static __inline__ __attribute__((always_inline)) double floor(double f)
{
  return __nv_floor(f);
}

static __inline__ __attribute__((always_inline)) float fabsf(float f)
{
  return __nv_fabsf(f);
}

static __inline__ __attribute__((always_inline)) double fabs(double f)
{
  return __nv_fabs(f);
}

static __inline__ __attribute__((always_inline)) double __rcp64h(double d)
{
  return __nv_rcp64h(d);
}

static __inline__ __attribute__((always_inline)) float fminf(float x, float y)
{
  return __nv_fminf(x, y);
}

static __inline__ __attribute__((always_inline)) float fmaxf(float x, float y)
{
  return __nv_fmaxf(x, y);
}

static __inline__ __attribute__((always_inline)) float rsqrtf(float x)
{
  return __nv_rsqrtf(x);
}

static __inline__ __attribute__((always_inline)) double fmin(double x, double y)
{
  return __nv_fmin(x, y);
}

static __inline__ __attribute__((always_inline)) double fmax(double x, double y)
{
  return __nv_fmax(x, y);
}

static __inline__ __attribute__((always_inline)) double rsqrt(double x)
{
  return __nv_rsqrt(x);
}

static __inline__ __attribute__((always_inline)) double ceil(double x)
{
  return __nv_ceil(x);
}

static __inline__ __attribute__((always_inline)) double trunc(double x)
{
  return __nv_trunc(x);
}

static __inline__ __attribute__((always_inline)) float exp2f(float x)
{
  return __nv_exp2f(x);
}

static __inline__ __attribute__((always_inline)) float truncf(float x)
{
  return __nv_truncf(x);
}

static __inline__ __attribute__((always_inline)) float ceilf(float x)
{
  return __nv_ceilf(x);
}

static __inline__ __attribute__((always_inline)) float __saturatef(float x)
{
  return __nv_saturatef(x);
}






static __inline__ __attribute__((always_inline)) float __fmaf_rn(float x, float y, float z)
{
  return __nv_fmaf_rn(x, y, z);
}

static __inline__ __attribute__((always_inline)) float __fmaf_rz(float x, float y, float z)
{
  return __nv_fmaf_rz(x, y, z);
}

static __inline__ __attribute__((always_inline)) float __fmaf_rd(float x, float y, float z)
{
  return __nv_fmaf_rd(x, y, z);
}

static __inline__ __attribute__((always_inline)) float __fmaf_ru(float x, float y, float z)
{
  return __nv_fmaf_ru(x, y, z);
}






static __inline__ __attribute__((always_inline)) float __fmaf_ieee_rn(float x, float y, float z)
{
  return __nv_fmaf_ieee_rn(x, y, z);
}

static __inline__ __attribute__((always_inline)) float __fmaf_ieee_rz(float x, float y, float z)
{
  return __nv_fmaf_ieee_rz(x, y, z);
}

static __inline__ __attribute__((always_inline)) float __fmaf_ieee_rd(float x, float y, float z)
{
  return __nv_fmaf_ieee_rd(x, y, z);
}

static __inline__ __attribute__((always_inline)) float __fmaf_ieee_ru(float x, float y, float z)
{
  return __nv_fmaf_ieee_ru(x, y, z);
}






static __inline__ __attribute__((always_inline)) double __fma_rn(double x, double y, double z)
{
  return __nv_fma_rn(x, y, z);
}

static __inline__ __attribute__((always_inline)) double __fma_rz(double x, double y, double z)
{
  return __nv_fma_rz(x, y, z);
}

static __inline__ __attribute__((always_inline)) double __fma_rd(double x, double y, double z)
{
  return __nv_fma_rd(x, y, z);
}

static __inline__ __attribute__((always_inline)) double __fma_ru(double x, double y, double z)
{
  return __nv_fma_ru(x, y, z);
}

static __inline__ __attribute__((always_inline)) float __fdividef(float x, float y)
{
  return __nv_fast_fdividef(x, y);
}






static __inline__ __attribute__((always_inline)) float __fdiv_rn(float x, float y)
{
  return __nv_fdiv_rn(x, y);
}

static __inline__ __attribute__((always_inline)) float __fdiv_rz(float x, float y)
{
  return __nv_fdiv_rz(x, y);
}

static __inline__ __attribute__((always_inline)) float __fdiv_rd(float x, float y)
{
  return __nv_fdiv_rd(x, y);
}

static __inline__ __attribute__((always_inline)) float __fdiv_ru(float x, float y)
{
  return __nv_fdiv_ru(x, y);
}






static __inline__ __attribute__((always_inline)) float __frcp_rn(float x)
{
  return __nv_frcp_rn(x);
}

static __inline__ __attribute__((always_inline)) float __frcp_rz(float x)
{
  return __nv_frcp_rz(x);
}

static __inline__ __attribute__((always_inline)) float __frcp_rd(float x)
{
  return __nv_frcp_rd(x);
}

static __inline__ __attribute__((always_inline)) float __frcp_ru(float x)
{
  return __nv_frcp_ru(x);
}






static __inline__ __attribute__((always_inline)) float __fsqrt_rn(float x)
{
  return __nv_fsqrt_rn(x);
}

static __inline__ __attribute__((always_inline)) float __fsqrt_rz(float x)
{
  return __nv_fsqrt_rz(x);
}

static __inline__ __attribute__((always_inline)) float __fsqrt_rd(float x)
{
  return __nv_fsqrt_rd(x);
}

static __inline__ __attribute__((always_inline)) float __fsqrt_ru(float x)
{
  return __nv_fsqrt_ru(x);
}






static __inline__ __attribute__((always_inline)) double __ddiv_rn(double x, double y)
{
  return __nv_ddiv_rn(x, y);
}

static __inline__ __attribute__((always_inline)) double __ddiv_rz(double x, double y)
{
  return __nv_ddiv_rz(x, y);
}

static __inline__ __attribute__((always_inline)) double __ddiv_rd(double x, double y)
{
  return __nv_ddiv_rd(x, y);
}

static __inline__ __attribute__((always_inline)) double __ddiv_ru(double x, double y)
{
  return __nv_ddiv_ru(x, y);
}






static __inline__ __attribute__((always_inline)) double __drcp_rn(double x)
{
  return __nv_drcp_rn(x);
}

static __inline__ __attribute__((always_inline)) double __drcp_rz(double x)
{
  return __nv_drcp_rz(x);
}

static __inline__ __attribute__((always_inline)) double __drcp_rd(double x)
{
  return __nv_drcp_rd(x);
}

static __inline__ __attribute__((always_inline)) double __drcp_ru(double x)
{
  return __nv_drcp_ru(x);
}






static __inline__ __attribute__((always_inline)) double __dsqrt_rn(double x)
{
  return __nv_dsqrt_rn(x);
}

static __inline__ __attribute__((always_inline)) double __dsqrt_rz(double x)
{
  return __nv_dsqrt_rz(x);
}

static __inline__ __attribute__((always_inline)) double __dsqrt_rd(double x)
{
  return __nv_dsqrt_rd(x);
}

static __inline__ __attribute__((always_inline)) double __dsqrt_ru(double x)
{
  return __nv_dsqrt_ru(x);
}

static __inline__ __attribute__((always_inline)) float sqrtf(float x)
{
  return __nv_sqrtf(x);
}

static __inline__ __attribute__((always_inline)) double sqrt(double x)
{
  return __nv_sqrt(x);
}






static __inline__ __attribute__((always_inline)) double __dadd_rn(double x, double y)
{
  return __nv_dadd_rn(x, y);
}

static __inline__ __attribute__((always_inline)) double __dadd_rz(double x, double y)
{
  return __nv_dadd_rz(x, y);
}

static __inline__ __attribute__((always_inline)) double __dadd_rd(double x, double y)
{
  return __nv_dadd_rd(x, y);
}

static __inline__ __attribute__((always_inline)) double __dadd_ru(double x, double y)
{
  return __nv_dadd_ru(x, y);
}






static __inline__ __attribute__((always_inline)) double __dmul_rn(double x, double y)
{
  return __nv_dmul_rn(x, y);
}

static __inline__ __attribute__((always_inline)) double __dmul_rz(double x, double y)
{
  return __nv_dmul_rz(x, y);
}

static __inline__ __attribute__((always_inline)) double __dmul_rd(double x, double y)
{
  return __nv_dmul_rd(x, y);
}

static __inline__ __attribute__((always_inline)) double __dmul_ru(double x, double y)
{
  return __nv_dmul_ru(x, y);
}






static __inline__ __attribute__((always_inline)) float __fadd_rd(float x, float y)
{
  return __nv_fadd_rd(x, y);
}

static __inline__ __attribute__((always_inline)) float __fadd_ru(float x, float y)
{
  return __nv_fadd_ru(x, y);
}

static __inline__ __attribute__((always_inline)) float __fadd_rn(float x, float y)
{
  return __nv_fadd_rn(x, y);
}

static __inline__ __attribute__((always_inline)) float __fadd_rz(float x, float y)
{
  return __nv_fadd_rz(x, y);
}






static __inline__ __attribute__((always_inline)) float __fmul_rd(float x, float y)
{
  return __nv_fmul_rd(x, y);
}

static __inline__ __attribute__((always_inline)) float __fmul_ru(float x, float y)
{
  return __nv_fmul_ru(x, y);
}

static __inline__ __attribute__((always_inline)) float __fmul_rn(float x, float y)
{
  return __nv_fmul_rn(x, y);
}

static __inline__ __attribute__((always_inline)) float __fmul_rz(float x, float y)
{
  return __nv_fmul_rz(x, y);
}







static __inline__ __attribute__((always_inline)) float __double2float_rn(double d)
{
  return __nv_double2float_rn(d);
}

static __inline__ __attribute__((always_inline)) float __double2float_rz(double d)
{
  return __nv_double2float_rz(d);
}

static __inline__ __attribute__((always_inline)) float __double2float_rd(double d)
{
  return __nv_double2float_rd(d);
}

static __inline__ __attribute__((always_inline)) float __double2float_ru(double d)
{
  return __nv_double2float_ru(d);
}
    

static __inline__ __attribute__((always_inline)) int __double2int_rn(double d)
{
  return __nv_double2int_rn(d);
}

static __inline__ __attribute__((always_inline)) int __double2int_rz(double d)
{
  return __nv_double2int_rz(d);
}

static __inline__ __attribute__((always_inline)) int __double2int_rd(double d)
{
  return __nv_double2int_rd(d);
}

static __inline__ __attribute__((always_inline)) int __double2int_ru(double d)
{
  return __nv_double2int_ru(d);
}


static __inline__ __attribute__((always_inline)) unsigned int __double2uint_rn(double d)
{
  return __nv_double2uint_rn(d);
}

static __inline__ __attribute__((always_inline)) unsigned int __double2uint_rz(double d)
{
  return __nv_double2uint_rz(d);
}

static __inline__ __attribute__((always_inline)) unsigned int __double2uint_rd(double d)
{
  return __nv_double2uint_rd(d);
}

static __inline__ __attribute__((always_inline)) unsigned int __double2uint_ru(double d)
{
  return __nv_double2uint_ru(d);
}


static __inline__ __attribute__((always_inline)) double __int2double_rn(int i)
{
  return __nv_int2double_rn(i);
}


static __inline__ __attribute__((always_inline)) double __uint2double_rn(unsigned int i)
{
  return __nv_uint2double_rn(i);
}


static __inline__ __attribute__((always_inline)) int __float2int_rn(float in)
{
  return __nv_float2int_rn(in);
}

static __inline__ __attribute__((always_inline)) int __float2int_rz(float in)
{
  return __nv_float2int_rz(in);
}

static __inline__ __attribute__((always_inline)) int __float2int_rd(float in)
{
  return __nv_float2int_rd(in);
}

static __inline__ __attribute__((always_inline)) int __float2int_ru(float in)
{
  return __nv_float2int_ru(in);
}


static __inline__ __attribute__((always_inline)) unsigned int __float2uint_rn(float in)
{
  return __nv_float2uint_rn(in);
}

static __inline__ __attribute__((always_inline)) unsigned int __float2uint_rz(float in)
{
  return __nv_float2uint_rz(in);
}

static __inline__ __attribute__((always_inline)) unsigned int __float2uint_rd(float in)
{
  return __nv_float2uint_rd(in);
}

static __inline__ __attribute__((always_inline)) unsigned int __float2uint_ru(float in)
{
  return __nv_float2uint_ru(in);
}


static __inline__ __attribute__((always_inline)) float __int2float_rn(int in)
{
  return __nv_int2float_rn(in);
}

static __inline__ __attribute__((always_inline)) float __int2float_rz(int in)
{
  return __nv_int2float_rz(in);
}

static __inline__ __attribute__((always_inline)) float __int2float_rd(int in)
{
  return __nv_int2float_rd(in);
}

static __inline__ __attribute__((always_inline)) float __int2float_ru(int in)
{
  return __nv_int2float_ru(in);
}


static __inline__ __attribute__((always_inline)) float __uint2float_rn(unsigned int in)
{
  return __nv_uint2float_rn(in);
}

static __inline__ __attribute__((always_inline)) float __uint2float_rz(unsigned int in)
{
  return __nv_uint2float_rz(in);
}

static __inline__ __attribute__((always_inline)) float __uint2float_rd(unsigned int in)
{
  return __nv_uint2float_rd(in);
}

static __inline__ __attribute__((always_inline)) float __uint2float_ru(unsigned int in)
{
  return __nv_uint2float_ru(in);
}


static __inline__ __attribute__((always_inline)) double __hiloint2double(int a, int b)
{
  return __nv_hiloint2double(a, b);
}

static __inline__ __attribute__((always_inline)) int __double2loint(double d)
{
  return __nv_double2loint(d);
}

static __inline__ __attribute__((always_inline)) int __double2hiint(double d)
{
  return __nv_double2hiint(d);
}


static __inline__ __attribute__((always_inline)) long long __float2ll_rn(float f)
{
  return __nv_float2ll_rn(f);
}

static __inline__ __attribute__((always_inline)) long long __float2ll_rz(float f)
{
  return __nv_float2ll_rz(f);
}

static __inline__ __attribute__((always_inline)) long long __float2ll_rd(float f)
{
  return __nv_float2ll_rd(f);
}

static __inline__ __attribute__((always_inline)) long long __float2ll_ru(float f)
{
  return __nv_float2ll_ru(f);
}


static __inline__ __attribute__((always_inline)) unsigned long long __float2ull_rn(float f)
{
  return __nv_float2ull_rn(f);
}

static __inline__ __attribute__((always_inline)) unsigned long long __float2ull_rz(float f)
{
  return __nv_float2ull_rz(f);
}

static __inline__ __attribute__((always_inline)) unsigned long long __float2ull_rd(float f)
{
  return __nv_float2ull_rd(f);
}

static __inline__ __attribute__((always_inline)) unsigned long long __float2ull_ru(float f)
{
  return __nv_float2ull_ru(f);
}


static __inline__ __attribute__((always_inline)) long long __double2ll_rn(double f)
{
  return __nv_double2ll_rn(f);
}

static __inline__ __attribute__((always_inline)) long long __double2ll_rz(double f)
{
  return __nv_double2ll_rz(f);
}

static __inline__ __attribute__((always_inline)) long long __double2ll_rd(double f)
{
  return __nv_double2ll_rd(f);
}

static __inline__ __attribute__((always_inline)) long long __double2ll_ru(double f)
{
  return __nv_double2ll_ru(f);
}


static __inline__ __attribute__((always_inline)) unsigned long long __double2ull_rn(double f)
{
  return __nv_double2ull_rn(f);
}

static __inline__ __attribute__((always_inline)) unsigned long long __double2ull_rz(double f)
{
  return __nv_double2ull_rz(f);
}

static __inline__ __attribute__((always_inline)) unsigned long long __double2ull_rd(double f)
{
  return __nv_double2ull_rd(f);
}

static __inline__ __attribute__((always_inline)) unsigned long long __double2ull_ru(double f)
{
  return __nv_double2ull_ru(f);
}


static __inline__ __attribute__((always_inline)) float __ll2float_rn(long long l)
{
  return __nv_ll2float_rn(l);
}

static __inline__ __attribute__((always_inline)) float __ll2float_rz(long long l)
{
  return __nv_ll2float_rz(l);
}

static __inline__ __attribute__((always_inline)) float __ll2float_rd(long long l)
{
  return __nv_ll2float_rd(l);
}

static __inline__ __attribute__((always_inline)) float __ll2float_ru(long long l)
{
  return __nv_ll2float_ru(l);
}


static __inline__ __attribute__((always_inline)) float __ull2float_rn(unsigned long long l)
{
  return __nv_ull2float_rn(l);
}

static __inline__ __attribute__((always_inline)) float __ull2float_rz(unsigned long long l)
{
  return __nv_ull2float_rz(l);
}

static __inline__ __attribute__((always_inline)) float __ull2float_rd(unsigned long long l)
{
  return __nv_ull2float_rd(l);
}

static __inline__ __attribute__((always_inline)) float __ull2float_ru(unsigned long long l)
{
  return __nv_ull2float_ru(l);
}


static __inline__ __attribute__((always_inline)) double __ll2double_rn(long long l)
{
  return __nv_ll2double_rn(l);
}

static __inline__ __attribute__((always_inline)) double __ll2double_rz(long long l)
{
  return __nv_ll2double_rz(l);
}

static __inline__ __attribute__((always_inline)) double __ll2double_rd(long long l)
{
  return __nv_ll2double_rd(l);
}

static __inline__ __attribute__((always_inline)) double __ll2double_ru(long long l)
{
  return __nv_ll2double_ru(l);
}


static __inline__ __attribute__((always_inline)) double __ull2double_rn(unsigned long long l)
{
  return __nv_ull2double_rn(l);
}

static __inline__ __attribute__((always_inline)) double __ull2double_rz(unsigned long long l)
{
  return __nv_ull2double_rz(l);
}

static __inline__ __attribute__((always_inline)) double __ull2double_rd(unsigned long long l)
{
  return __nv_ull2double_rd(l);
}

static __inline__ __attribute__((always_inline)) double __ull2double_ru(unsigned long long l)
{
  return __nv_ull2double_ru(l);
}

static __inline__ __attribute__((always_inline)) unsigned short __float2half_rn(float f)
{
  return __nv_float2half_rn(f);
}

static __inline__ __attribute__((always_inline)) float __half2float(unsigned short h)
{
  return __nv_half2float(h);
}

static __inline__ __attribute__((always_inline)) float __int_as_float(int x)
{
  return __nv_int_as_float(x);
}

static __inline__ __attribute__((always_inline)) int __float_as_int(float x)
{
  return __nv_float_as_int(x);
}
    
static __inline__ __attribute__((always_inline)) double __longlong_as_double(long long x)
{
  return __nv_longlong_as_double(x);
}

static __inline__ __attribute__((always_inline)) long long  __double_as_longlong (double x)
{
  return __nv_double_as_longlong(x);
}







static __inline__ __attribute__((always_inline)) float __sinf(float a)
{
  return __nv_fast_sinf(a);
}

static __inline__ __attribute__((always_inline)) float __cosf(float a)
{
  return __nv_fast_cosf(a);
}

static __inline__ __attribute__((always_inline)) float __log2f(float a)
{
  return __nv_fast_log2f(a);
}







static __inline__ __attribute__((always_inline)) float __tanf(float a)
{
  return __nv_fast_tanf(a);
}

static __inline__ __attribute__((always_inline)) void __sincosf(float a, float *sptr, float *cptr)
{
  __nv_fast_sincosf(a, sptr, cptr);
}

static __inline__ __attribute__((always_inline)) float __expf(float a)
{
  return __nv_fast_expf(a);
}

static __inline__ __attribute__((always_inline)) float __exp10f(float a)
{
  return __nv_fast_exp10f(a);
}

static __inline__ __attribute__((always_inline)) float __log10f(float a)
{
  return __nv_fast_log10f(a);
}

static __inline__ __attribute__((always_inline)) float __logf(float a)
{
  return __nv_fast_logf(a);
}

static __inline__ __attribute__((always_inline)) float __powf(float a, float b)
{
  return __nv_fast_powf(a, b);
}

static __inline__ __attribute__((always_inline)) float fdividef(float a, float b)
{


#line 3608 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\device_functions.h"
  return a / b;
#line 3610 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\device_functions.h"
}

static __inline__ __attribute__((always_inline)) double fdivide(double a, double b)
{
  return a / b;
}




























static __inline__ __attribute__((always_inline)) int __hadd(int a, int b)
{
  return __nv_hadd(a, b);
}

static __inline__ __attribute__((always_inline)) int __rhadd(int a, int b)
{
  return __nv_rhadd(a, b);
}

static __inline__ __attribute__((always_inline)) unsigned int __uhadd(unsigned int a, unsigned int b)
{
  return __nv_uhadd(a, b);
}

static __inline__ __attribute__((always_inline)) unsigned int __urhadd(unsigned int a, unsigned int b)
{
  return __nv_urhadd(a, b);
}

static __inline__ __attribute__((always_inline)) float __fsub_rn (float a, float b)
{
  return __nv_fsub_rn(a, b);
}

static __inline__ __attribute__((always_inline)) float __fsub_rz (float a, float b)
{
  return __nv_fsub_rz(a, b);
}

static __inline__ __attribute__((always_inline)) float __fsub_rd (float a, float b)
{
  return __nv_fsub_rd(a, b);
}

static __inline__ __attribute__((always_inline)) float __fsub_ru (float a, float b)
{
  return __nv_fsub_ru(a, b);
}

static __inline__ __attribute__((always_inline)) float __frsqrt_rn (float a)
{
  return __nv_frsqrt_rn(a);
}

static __inline__ __attribute__((always_inline)) int __ffs(int a)
{
  return __nv_ffs(a);
}

static __inline__ __attribute__((always_inline)) int __ffsll(long long int a)
{
  return __nv_ffsll(a);
}






static __inline__ __attribute__((always_inline))
int __iAtomicAdd(int *p, int val)
{
  return __nvvm_atom_add_gen_i((volatile int *)p, val);
}

static __inline__ __attribute__((always_inline))
unsigned int __uAtomicAdd(unsigned int *p, unsigned int val)
{
  return __nvvm_atom_add_gen_i((volatile int *)p, (int)val);
}

static __inline__ __attribute__((always_inline))
unsigned long long __ullAtomicAdd(unsigned long long *p, unsigned long long val)
{
  return __nvvm_atom_add_gen_ll((volatile long long *)p, (long long)val);
}

static __inline__ __attribute__((always_inline))
float __fAtomicAdd(float *p, float val)
{
  return __nvvm_atom_add_gen_f((volatile float *)p, val);
}

static __inline__ __attribute__((always_inline))
int __iAtomicExch(int *p, int val)
{
  return __nvvm_atom_xchg_gen_i((volatile int *)p, val);
}

static __inline__ __attribute__((always_inline))
unsigned int __uAtomicExch(unsigned int *p, unsigned int val)
{
  return __nvvm_atom_xchg_gen_i((volatile int *)p, (int)val);
}

static __inline__ __attribute__((always_inline))
unsigned long long __ullAtomicExch(unsigned long long *p,
                                   unsigned long long val)
{
  return __nvvm_atom_xchg_gen_ll((volatile long long *)p, (long long)val);
}

static __inline__ __attribute__((always_inline))
float __fAtomicExch(float *p, float val)
{
  int old = __nvvm_atom_xchg_gen_i((volatile int *)p, __float_as_int(val));
  return __int_as_float(old);
}

static __inline__ __attribute__((always_inline))
int __iAtomicMin(int *p, int val)
{
  return __nvvm_atom_min_gen_i((volatile int *)p, val);
}

static __inline__ __attribute__((always_inline))
long long __illAtomicMin(long long *p, long long val)
{
  return __nvvm_atom_min_gen_ll((volatile long long *)p, val);
}

static __inline__ __attribute__((always_inline))
unsigned int __uAtomicMin(unsigned int *p, unsigned int val)
{
  return __nvvm_atom_min_gen_ui((volatile unsigned int *)p, val);
}

static __inline__ __attribute__((always_inline))
unsigned long long __ullAtomicMin(unsigned long long *p, unsigned long long val)
{
  return __nvvm_atom_min_gen_ull((volatile unsigned long long *)p, val);
}

static __inline__ __attribute__((always_inline))
int __iAtomicMax(int *p, int val)
{
  return __nvvm_atom_max_gen_i((volatile int *)p, val);
}

static __inline__ __attribute__((always_inline))
long long __illAtomicMax(long long *p, long long val)
{
  return __nvvm_atom_max_gen_ll((volatile long long *)p, val);
}

static __inline__ __attribute__((always_inline))
unsigned int __uAtomicMax(unsigned int *p, unsigned int val)
{
  return __nvvm_atom_max_gen_ui((unsigned int *)p, val);
}

static __inline__ __attribute__((always_inline))
unsigned long long __ullAtomicMax(unsigned long long *p, unsigned long long val)
{
  return __nvvm_atom_max_gen_ull((volatile unsigned long long *)p, val);
}

static __inline__ __attribute__((always_inline))
unsigned int __uAtomicInc(unsigned int *p, unsigned int val)
{
  return __nvvm_atom_inc_gen_ui((unsigned int *)p, val);
}

static __inline__ __attribute__((always_inline))
unsigned int __uAtomicDec(unsigned int *p, unsigned int val)
{
  return __nvvm_atom_dec_gen_ui((unsigned int *)p, val);
}

static __inline__ __attribute__((always_inline))
int __iAtomicCAS(int *p, int compare, int val)
{
  return __nvvm_atom_cas_gen_i((int *)p, compare, val);
}

static __inline__ __attribute__((always_inline))
unsigned int __uAtomicCAS(unsigned int *p, unsigned int compare,
                          unsigned int val)
{
  return (unsigned int)__nvvm_atom_cas_gen_i((volatile int *)p,
                                             (int)compare,
                                             (int)val);
}

static __inline__ __attribute__((always_inline))
unsigned long long int __ullAtomicCAS(unsigned long long int *p,
                                      unsigned long long int compare,
                                      unsigned long long int val)
{
  return
    (unsigned long long int)__nvvm_atom_cas_gen_ll((volatile long long int *)p,
                                                   (long long int)compare,
                                                   (long long int)val);
}

static __inline__ __attribute__((always_inline))
int __iAtomicAnd(int *p, int val)
{
  return __nvvm_atom_and_gen_i((volatile int *)p, val);
}

static __inline__ __attribute__((always_inline))
long long int __llAtomicAnd(long long int *p, long long int val)
{
  return __nvvm_atom_and_gen_ll((volatile long long int *)p, (long long)val);
}

static __inline__ __attribute__((always_inline))
unsigned int __uAtomicAnd(unsigned int *p, unsigned int val)
{
  return (unsigned int)__nvvm_atom_and_gen_i((volatile int *)p, (int)val);
}

static __inline__ __attribute__((always_inline))
unsigned long long int __ullAtomicAnd(unsigned long long int *p,
                                      unsigned long long int val)
{
  return __nvvm_atom_and_gen_ll((volatile long long int *)p, (long long)val);
}

static __inline__ __attribute__((always_inline))
int __iAtomicOr(int *p, int val)
{
  return __nvvm_atom_or_gen_i((volatile int *)p, val);
}

static __inline__ __attribute__((always_inline))
long long int __llAtomicOr(long long int *p, long long int val)
{
  return __nvvm_atom_or_gen_ll((volatile long long int *)p, (long long)val);
}

static __inline__ __attribute__((always_inline))
unsigned int __uAtomicOr(unsigned int *p, unsigned int val)
{
  return (unsigned int)__nvvm_atom_or_gen_i((volatile int *)p, (int)val);
}

static __inline__ __attribute__((always_inline))
unsigned long long int __ullAtomicOr(unsigned long long int *p,
                                     unsigned long long int val)
{
  return __nvvm_atom_or_gen_ll((volatile long long int *)p, (long long)val);
}

static __inline__ __attribute__((always_inline))
int __iAtomicXor(int *p, int val)
{
  return __nvvm_atom_xor_gen_i((volatile int *)p, val);
}

static __inline__ __attribute__((always_inline))
long long int __llAtomicXor(long long int *p, long long int val)
{
  return __nvvm_atom_xor_gen_ll((volatile long long int *)p, (long long)val);
}

static __inline__ __attribute__((always_inline))
unsigned int __uAtomicXor(unsigned int *p, unsigned int val)
{
  return (unsigned int)__nvvm_atom_xor_gen_i((volatile int *)p, (int)val);
}

static __inline__ __attribute__((always_inline))
unsigned long long int __ullAtomicXor(unsigned long long int *p,
                                      unsigned long long int val)
{
  return __nvvm_atom_xor_gen_ll((volatile long long int *)p, (long long)val);
}



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 6374 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\device_functions.h"

#line 6376 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\device_functions.h"







#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\sm_11_atomic_functions.h"










































































































































































































#line 204 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\sm_11_atomic_functions.h"

#line 206 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\sm_11_atomic_functions.h"
#line 6384 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\device_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\sm_12_atomic_functions.h"











































































































#line 109 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\sm_12_atomic_functions.h"

#line 111 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\sm_12_atomic_functions.h"
#line 6385 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\device_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\sm_13_double_functions.h"













































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1231 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\sm_13_double_functions.h"


static __inline__ __attribute__((always_inline)) double __dsub_rn(double a, double b)
{
  double res;
  asm ("sub.rn.f64 %0, %1, %2;" : "=d"(res) : "d"(a), "d"(b));
  return res;
}

static __inline__ __attribute__((always_inline)) double __dsub_rz(double a, double b)
{
  double res;
  asm ("sub.rz.f64 %0, %1, %2;" : "=d"(res) : "d"(a), "d"(b));
  return res;
}

static __inline__ __attribute__((always_inline)) double __dsub_ru(double a, double b)
{
  double res;
  asm ("sub.rp.f64 %0, %1, %2;" : "=d"(res) : "d"(a), "d"(b));
  return res;
}

static __inline__ __attribute__((always_inline)) double __dsub_rd(double a, double b)
{
  double res;
  asm ("sub.rm.f64 %0, %1, %2;" : "=d"(res) : "d"(a), "d"(b));
  return res;
}
#line 1261 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\sm_13_double_functions.h"

#line 1263 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\sm_13_double_functions.h"

#line 1265 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\sm_13_double_functions.h"

#line 6386 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\device_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\sm_20_atomic_functions.h"



















































































#line 85 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\sm_20_atomic_functions.h"

#line 87 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\sm_20_atomic_functions.h"
#line 6387 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\device_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\sm_32_atomic_functions.h"























































































































#line 121 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\sm_32_atomic_functions.h"

#line 123 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\sm_32_atomic_functions.h"
#line 6388 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\device_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\sm_35_atomic_functions.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\sm_32_atomic_functions.h"

























































































































#line 123 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\sm_32_atomic_functions.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\sm_35_atomic_functions.h"

#line 59 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\sm_35_atomic_functions.h"
#line 6389 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\device_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\sm_20_intrinsics.h"































































































































































































































































































































































































































































#line 449 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\sm_20_intrinsics.h"

#line 451 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\sm_20_intrinsics.h"
#line 6390 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\device_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\sm_30_intrinsics.h"































































































































































#line 161 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\sm_30_intrinsics.h"

#line 163 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\sm_30_intrinsics.h"
#line 6391 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\device_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\sm_32_intrinsics.h"































































































































































#line 161 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\sm_32_intrinsics.h"

#line 163 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\sm_32_intrinsics.h"
#line 6392 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\device_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\sm_35_intrinsics.h"














































































































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\sm_32_intrinsics.h"

































































































































































#line 163 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\sm_32_intrinsics.h"
#line 112 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\sm_35_intrinsics.h"



#line 116 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\sm_35_intrinsics.h"

#line 6393 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\device_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\surface_functions.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 4486 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\surface_functions.h"


extern uchar1     __surf1Dreadc1(unsigned long long, int, enum cudaSurfaceBoundaryMode);
extern uchar2     __surf1Dreadc2(unsigned long long, int, enum cudaSurfaceBoundaryMode);
extern uchar4     __surf1Dreadc4(unsigned long long, int, enum cudaSurfaceBoundaryMode);
extern ushort1    __surf1Dreads1(unsigned long long, int, enum cudaSurfaceBoundaryMode);
extern ushort2    __surf1Dreads2(unsigned long long, int, enum cudaSurfaceBoundaryMode);
extern ushort4    __surf1Dreads4(unsigned long long, int, enum cudaSurfaceBoundaryMode);
extern uint1      __surf1Dreadu1(unsigned long long, int, enum cudaSurfaceBoundaryMode);
extern uint2      __surf1Dreadu2(unsigned long long, int, enum cudaSurfaceBoundaryMode);
extern uint4      __surf1Dreadu4(unsigned long long, int, enum cudaSurfaceBoundaryMode);
extern ulonglong1 __surf1Dreadl1(unsigned long long, int, enum cudaSurfaceBoundaryMode);
extern ulonglong2 __surf1Dreadl2(unsigned long long, int, enum cudaSurfaceBoundaryMode);
extern uchar1     __surf2Dreadc1(unsigned long long, int, int, enum cudaSurfaceBoundaryMode);
extern uchar2     __surf2Dreadc2(unsigned long long, int, int, enum cudaSurfaceBoundaryMode);
extern uchar4     __surf2Dreadc4(unsigned long long, int, int, enum cudaSurfaceBoundaryMode);
extern ushort1    __surf2Dreads1(unsigned long long, int, int, enum cudaSurfaceBoundaryMode);
extern ushort2    __surf2Dreads2(unsigned long long, int, int, enum cudaSurfaceBoundaryMode);
extern ushort4    __surf2Dreads4(unsigned long long, int, int, enum cudaSurfaceBoundaryMode);
extern uint1      __surf2Dreadu1(unsigned long long, int, int, enum cudaSurfaceBoundaryMode);
extern uint2      __surf2Dreadu2(unsigned long long, int, int, enum cudaSurfaceBoundaryMode);
extern uint4      __surf2Dreadu4(unsigned long long, int, int, enum cudaSurfaceBoundaryMode);
extern ulonglong1 __surf2Dreadl1(unsigned long long, int, int, enum cudaSurfaceBoundaryMode);
extern ulonglong2 __surf2Dreadl2(unsigned long long, int, int, enum cudaSurfaceBoundaryMode);
extern uchar1     __surf3Dreadc1(unsigned long long, int, int, int, enum cudaSurfaceBoundaryMode);
extern uchar2     __surf3Dreadc2(unsigned long long, int, int, int, enum cudaSurfaceBoundaryMode);
extern uchar4     __surf3Dreadc4(unsigned long long, int, int, int, enum cudaSurfaceBoundaryMode);
extern ushort1    __surf3Dreads1(unsigned long long, int, int, int, enum cudaSurfaceBoundaryMode);
extern ushort2    __surf3Dreads2(unsigned long long, int, int, int, enum cudaSurfaceBoundaryMode);
extern ushort4    __surf3Dreads4(unsigned long long, int, int, int, enum cudaSurfaceBoundaryMode);
extern uint1      __surf3Dreadu1(unsigned long long, int, int, int, enum cudaSurfaceBoundaryMode);
extern uint2      __surf3Dreadu2(unsigned long long, int, int, int, enum cudaSurfaceBoundaryMode);
extern uint4      __surf3Dreadu4(unsigned long long, int, int, int, enum cudaSurfaceBoundaryMode);
extern ulonglong1 __surf3Dreadl1(unsigned long long, int, int, int, enum cudaSurfaceBoundaryMode);
extern ulonglong2 __surf3Dreadl2(unsigned long long, int, int, int, enum cudaSurfaceBoundaryMode);
extern uchar1     __surf1DLayeredreadc1(unsigned long long, int, int, enum cudaSurfaceBoundaryMode);
extern uchar2     __surf1DLayeredreadc2(unsigned long long, int, int, enum cudaSurfaceBoundaryMode);
extern uchar4     __surf1DLayeredreadc4(unsigned long long, int, int, enum cudaSurfaceBoundaryMode);
extern ushort1    __surf1DLayeredreads1(unsigned long long, int, int, enum cudaSurfaceBoundaryMode);
extern ushort2    __surf1DLayeredreads2(unsigned long long, int, int, enum cudaSurfaceBoundaryMode);
extern ushort4    __surf1DLayeredreads4(unsigned long long, int, int, enum cudaSurfaceBoundaryMode);
extern uint1      __surf1DLayeredreadu1(unsigned long long, int, int, enum cudaSurfaceBoundaryMode);
extern uint2      __surf1DLayeredreadu2(unsigned long long, int, int, enum cudaSurfaceBoundaryMode);
extern uint4      __surf1DLayeredreadu4(unsigned long long, int, int, enum cudaSurfaceBoundaryMode);
extern ulonglong1 __surf1DLayeredreadl1(unsigned long long, int, int, enum cudaSurfaceBoundaryMode);
extern ulonglong2 __surf1DLayeredreadl2(unsigned long long, int, int, enum cudaSurfaceBoundaryMode);
extern uchar1     __surf2DLayeredreadc1(unsigned long long, int, int, int, enum cudaSurfaceBoundaryMode);
extern uchar2     __surf2DLayeredreadc2(unsigned long long, int, int, int, enum cudaSurfaceBoundaryMode);
extern uchar4     __surf2DLayeredreadc4(unsigned long long, int, int, int, enum cudaSurfaceBoundaryMode);
extern ushort1    __surf2DLayeredreads1(unsigned long long, int, int, int, enum cudaSurfaceBoundaryMode);
extern ushort2    __surf2DLayeredreads2(unsigned long long, int, int, int, enum cudaSurfaceBoundaryMode);
extern ushort4    __surf2DLayeredreads4(unsigned long long, int, int, int, enum cudaSurfaceBoundaryMode);
extern uint1      __surf2DLayeredreadu1(unsigned long long, int, int, int, enum cudaSurfaceBoundaryMode);
extern uint2      __surf2DLayeredreadu2(unsigned long long, int, int, int, enum cudaSurfaceBoundaryMode);
extern uint4      __surf2DLayeredreadu4(unsigned long long, int, int, int, enum cudaSurfaceBoundaryMode);
extern ulonglong1 __surf2DLayeredreadl1(unsigned long long, int, int, int, enum cudaSurfaceBoundaryMode);
extern ulonglong2 __surf2DLayeredreadl2(unsigned long long, int, int, int, enum cudaSurfaceBoundaryMode);
extern void       __surf1Dwritec1(    uchar1, unsigned long long, int, enum cudaSurfaceBoundaryMode);
extern void       __surf1Dwritec2(    uchar2, unsigned long long, int, enum cudaSurfaceBoundaryMode);
extern void       __surf1Dwritec4(    uchar4, unsigned long long, int, enum cudaSurfaceBoundaryMode);
extern void       __surf1Dwrites1(   ushort1, unsigned long long, int, enum cudaSurfaceBoundaryMode);
extern void       __surf1Dwrites2(   ushort2, unsigned long long, int, enum cudaSurfaceBoundaryMode);
extern void       __surf1Dwrites4(   ushort4, unsigned long long, int, enum cudaSurfaceBoundaryMode);
extern void       __surf1Dwriteu1(     uint1, unsigned long long, int, enum cudaSurfaceBoundaryMode);
extern void       __surf1Dwriteu2(     uint2, unsigned long long, int, enum cudaSurfaceBoundaryMode);
extern void       __surf1Dwriteu4(     uint4, unsigned long long, int, enum cudaSurfaceBoundaryMode);
extern void       __surf1Dwritel1(ulonglong1, unsigned long long, int, enum cudaSurfaceBoundaryMode);
extern void       __surf1Dwritel2(ulonglong2, unsigned long long, int, enum cudaSurfaceBoundaryMode);
extern void       __surf2Dwritec1(    uchar1, unsigned long long, int, int, enum cudaSurfaceBoundaryMode);
extern void       __surf2Dwritec2(    uchar2, unsigned long long, int, int, enum cudaSurfaceBoundaryMode);
extern void       __surf2Dwritec4(    uchar4, unsigned long long, int, int, enum cudaSurfaceBoundaryMode);
extern void       __surf2Dwrites1(   ushort1, unsigned long long, int, int, enum cudaSurfaceBoundaryMode);
extern void       __surf2Dwrites2(   ushort2, unsigned long long, int, int, enum cudaSurfaceBoundaryMode);
extern void       __surf2Dwrites4(   ushort4, unsigned long long, int, int, enum cudaSurfaceBoundaryMode);
extern void       __surf2Dwriteu1(     uint1, unsigned long long, int, int, enum cudaSurfaceBoundaryMode);
extern void       __surf2Dwriteu2(     uint2, unsigned long long, int, int, enum cudaSurfaceBoundaryMode);
extern void       __surf2Dwriteu4(     uint4, unsigned long long, int, int, enum cudaSurfaceBoundaryMode);
extern void       __surf2Dwritel1(ulonglong1, unsigned long long, int, int, enum cudaSurfaceBoundaryMode);
extern void       __surf2Dwritel2(ulonglong2, unsigned long long, int, int, enum cudaSurfaceBoundaryMode);
extern void       __surf3Dwritec1(    uchar1 val, unsigned long long, int, int, int, enum cudaSurfaceBoundaryMode);
extern void       __surf3Dwritec2(    uchar2 val, unsigned long long, int, int, int, enum cudaSurfaceBoundaryMode);
extern void       __surf3Dwritec4(    uchar4 val, unsigned long long, int, int, int, enum cudaSurfaceBoundaryMode);
extern void       __surf3Dwrites1(   ushort1 val, unsigned long long, int, int, int, enum cudaSurfaceBoundaryMode);
extern void       __surf3Dwrites2(   ushort2 val, unsigned long long, int, int, int, enum cudaSurfaceBoundaryMode);
extern void       __surf3Dwrites4(   ushort4 val, unsigned long long, int, int, int, enum cudaSurfaceBoundaryMode);
extern void       __surf3Dwriteu1(     uint1 val, unsigned long long, int, int, int, enum cudaSurfaceBoundaryMode);
extern void       __surf3Dwriteu2(     uint2 val, unsigned long long, int, int, int, enum cudaSurfaceBoundaryMode);
extern void       __surf3Dwriteu4(     uint4 val, unsigned long long, int, int, int, enum cudaSurfaceBoundaryMode);
extern void       __surf3Dwritel1(ulonglong1 val, unsigned long long, int, int, int, enum cudaSurfaceBoundaryMode);
extern void       __surf3Dwritel2(ulonglong2 val, unsigned long long, int, int, int, enum cudaSurfaceBoundaryMode);
extern void       __surf1DLayeredwritec1(    uchar1 val, unsigned long long, int, int, enum cudaSurfaceBoundaryMode);
extern void       __surf1DLayeredwritec2(    uchar2 val, unsigned long long, int, int, enum cudaSurfaceBoundaryMode);
extern void       __surf1DLayeredwritec4(    uchar4 val, unsigned long long, int, int, enum cudaSurfaceBoundaryMode);
extern void       __surf1DLayeredwrites1(   ushort1 val, unsigned long long, int, int, enum cudaSurfaceBoundaryMode);
extern void       __surf1DLayeredwrites2(   ushort2 val, unsigned long long, int, int, enum cudaSurfaceBoundaryMode);
extern void       __surf1DLayeredwrites4(   ushort4 val, unsigned long long, int, int, enum cudaSurfaceBoundaryMode);
extern void       __surf1DLayeredwriteu1(     uint1 val, unsigned long long, int, int, enum cudaSurfaceBoundaryMode);
extern void       __surf1DLayeredwriteu2(     uint2 val, unsigned long long, int, int, enum cudaSurfaceBoundaryMode);
extern void       __surf1DLayeredwriteu4(     uint4 val, unsigned long long, int, int, enum cudaSurfaceBoundaryMode);
extern void       __surf1DLayeredwritel1(ulonglong1 val, unsigned long long, int, int, enum cudaSurfaceBoundaryMode);
extern void       __surf1DLayeredwritel2(ulonglong2 val, unsigned long long, int, int, enum cudaSurfaceBoundaryMode);
extern void       __surf2DLayeredwritec1(    uchar1 val, unsigned long long, int, int, int, enum cudaSurfaceBoundaryMode);
extern void       __surf2DLayeredwritec2(    uchar2 val, unsigned long long, int, int, int, enum cudaSurfaceBoundaryMode);
extern void       __surf2DLayeredwritec4(    uchar4 val, unsigned long long, int, int, int, enum cudaSurfaceBoundaryMode);
extern void       __surf2DLayeredwrites1(   ushort1 val, unsigned long long, int, int, int, enum cudaSurfaceBoundaryMode);
extern void       __surf2DLayeredwrites2(   ushort2 val, unsigned long long, int, int, int, enum cudaSurfaceBoundaryMode);
extern void       __surf2DLayeredwrites4(   ushort4 val, unsigned long long, int, int, int, enum cudaSurfaceBoundaryMode);
extern void       __surf2DLayeredwriteu1(     uint1 val, unsigned long long, int, int, int, enum cudaSurfaceBoundaryMode);
extern void       __surf2DLayeredwriteu2(     uint2 val, unsigned long long, int, int, int, enum cudaSurfaceBoundaryMode);
extern void       __surf2DLayeredwriteu4(     uint4 val, unsigned long long, int, int, int, enum cudaSurfaceBoundaryMode);
extern void       __surf2DLayeredwritel1(ulonglong1 val, unsigned long long, int, int, int, enum cudaSurfaceBoundaryMode);
extern void       __surf2DLayeredwritel2(ulonglong2 val, unsigned long long, int, int, int, enum cudaSurfaceBoundaryMode);















































































































#line 4710 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\surface_functions.h"
















































#line 4759 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\surface_functions.h"

#line 4761 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\surface_functions.h"

#line 6394 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\device_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\texture_fetch_functions.h"







































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 3689 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\texture_fetch_functions.h"


extern  uint4 __utexfetchi1D(unsigned long long, int4);
extern   int4 __itexfetchi1D(unsigned long long, int4);
extern float4 __ftexfetchi1D(unsigned long long, int4);
extern  uint4 __utexfetch1D(unsigned long long, float4);
extern   int4 __itexfetch1D(unsigned long long, float4);
extern float4 __ftexfetch1D(unsigned long long, float4);
extern  uint4 __utexfetch2D(unsigned long long, float4);
extern   int4 __itexfetch2D(unsigned long long, float4);
extern float4 __ftexfetch2D(unsigned long long, float4);
extern  uint4 __utexfetch3D(unsigned long long, float4);
extern   int4 __itexfetch3D(unsigned long long, float4);
extern float4 __ftexfetch3D(unsigned long long, float4);
extern  uint4 __utexfetchcube(unsigned long long, float4);
extern   int4 __itexfetchcube(unsigned long long, float4);
extern float4 __ftexfetchcube(unsigned long long, float4);
extern  uint4 __utexfetchl1D(unsigned long long, float4, int);
extern   int4 __itexfetchl1D(unsigned long long, float4, int);
extern float4 __ftexfetchl1D(unsigned long long, float4, int);
extern  uint4 __utexfetchl2D(unsigned long long, float4, int);
extern   int4 __itexfetchl2D(unsigned long long, float4, int);
extern float4 __ftexfetchl2D(unsigned long long, float4, int);
extern  uint4 __utexfetchlcube(unsigned long long, float4, int);
extern   int4 __itexfetchlcube(unsigned long long, float4, int);
extern float4 __ftexfetchlcube(unsigned long long, float4, int);

























#line 3741 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\texture_fetch_functions.h"
































#line 3774 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\texture_fetch_functions.h"


























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 9529 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\texture_fetch_functions.h"


extern  uint4 __utex2Dgather0(unsigned long long, float2);
extern  uint4 __utex2Dgather1(unsigned long long, float2);
extern  uint4 __utex2Dgather2(unsigned long long, float2);
extern  uint4 __utex2Dgather3(unsigned long long, float2);
extern   int4 __itex2Dgather0(unsigned long long, float2);
extern   int4 __itex2Dgather1(unsigned long long, float2);
extern   int4 __itex2Dgather2(unsigned long long, float2);
extern   int4 __itex2Dgather3(unsigned long long, float2);
extern float4 __ftex2Dgather0(unsigned long long, float2);
extern float4 __ftex2Dgather1(unsigned long long, float2);
extern float4 __ftex2Dgather2(unsigned long long, float2);
extern float4 __ftex2Dgather3(unsigned long long, float2);

extern  uint4 __utexfetchlod1D(unsigned long long, float4, float);
extern   int4 __itexfetchlod1D(unsigned long long, float4, float);
extern float4 __ftexfetchlod1D(unsigned long long, float4, float);
extern  uint4 __utexfetchlod2D(unsigned long long, float4, float);
extern   int4 __itexfetchlod2D(unsigned long long, float4, float);
extern float4 __ftexfetchlod2D(unsigned long long, float4, float);
extern  uint4 __utexfetchlod3D(unsigned long long, float4, float);
extern   int4 __itexfetchlod3D(unsigned long long, float4, float);
extern float4 __ftexfetchlod3D(unsigned long long, float4, float);
extern  uint4 __utexfetchlodcube(unsigned long long, float4, float);
extern   int4 __itexfetchlodcube(unsigned long long, float4, float);
extern float4 __ftexfetchlodcube(unsigned long long, float4, float);
extern  uint4 __utexfetchlodl1D(unsigned long long, float4, int, float);
extern   int4 __itexfetchlodl1D(unsigned long long, float4, int, float);
extern float4 __ftexfetchlodl1D(unsigned long long, float4, int, float);
extern  uint4 __utexfetchlodl2D(unsigned long long, float4, int, float);
extern   int4 __itexfetchlodl2D(unsigned long long, float4, int, float);
extern float4 __ftexfetchlodl2D(unsigned long long, float4, int, float);
extern  uint4 __utexfetchlodlcube(unsigned long long, float4, int, float);
extern   int4 __itexfetchlodlcube(unsigned long long, float4, int, float);
extern float4 __ftexfetchlodlcube(unsigned long long, float4, int, float);

extern  uint4 __utexfetchgrad1D(unsigned long long, float4, float4, float4);
extern   int4 __itexfetchgrad1D(unsigned long long, float4, float4, float4);
extern float4 __ftexfetchgrad1D(unsigned long long, float4, float4, float4);
extern  uint4 __utexfetchgrad2D(unsigned long long, float4, float4, float4);
extern   int4 __itexfetchgrad2D(unsigned long long, float4, float4, float4);
extern float4 __ftexfetchgrad2D(unsigned long long, float4, float4, float4);
extern  uint4 __utexfetchgrad3D(unsigned long long, float4, float4, float4);
extern   int4 __itexfetchgrad3D(unsigned long long, float4, float4, float4);
extern float4 __ftexfetchgrad3D(unsigned long long, float4, float4, float4);
extern  uint4 __utexfetchgradl1D(unsigned long long, float4, int, float4, float4);
extern   int4 __itexfetchgradl1D(unsigned long long, float4, int, float4, float4);
extern float4 __ftexfetchgradl1D(unsigned long long, float4, int, float4, float4);
extern  uint4 __utexfetchgradl2D(unsigned long long, float4, int, float4, float4);
extern   int4 __itexfetchgradl2D(unsigned long long, float4, int, float4, float4);
extern float4 __ftexfetchgradl2D(unsigned long long, float4, int, float4, float4);














#line 9596 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\texture_fetch_functions.h"














































#line 9643 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\texture_fetch_functions.h"

#line 9645 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\texture_fetch_functions.h"


#line 6395 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\device_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\texture_indirect_functions.h"







































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 7017 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\texture_indirect_functions.h"

#line 7019 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\texture_indirect_functions.h"



#line 6396 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\device_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\surface_indirect_functions.h"











































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 7277 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\surface_indirect_functions.h"

#line 7279 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\surface_indirect_functions.h"



#line 6397 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\device_functions.h"

#line 6399 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\device_functions.h"

#line 8256 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\math_functions.h"















static __inline__ __attribute__((always_inline)) float rintf(float a)
{
  return __nv_rintf(a);
}

static __inline__ __attribute__((always_inline)) long int lrintf(float a)
{


#line 8281 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\math_functions.h"
  return (long int)__float2int_rn(a);
#line 8283 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\math_functions.h"
}

static __inline__ __attribute__((always_inline)) long long int llrintf(float a)
{
  return __nv_llrintf(a);
}

static __inline__ __attribute__((always_inline)) float nearbyintf(float a)
{
  return __nv_nearbyintf(a);
}







static __inline__ __attribute__((always_inline)) int __signbitf(float a)
{
  return __nv_signbitf(a);
}




static __inline__ __attribute__((always_inline)) float copysignf(float a, float b)
{
  return __nv_copysignf(a, b);
}

static __inline__ __attribute__((always_inline)) int __finitef(float a)
{
  return __nv_finitef(a);
}








#line 8327 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\math_functions.h"

static __inline__ __attribute__((always_inline)) int __isinff(float a)
{
  return __nv_isinff(a);
}

static __inline__ __attribute__((always_inline)) int __isnanf(float a)
{
  return __nv_isnanf(a);
}

static __inline__ __attribute__((always_inline)) float nextafterf(float a, float b)
{
  return __nv_nextafterf(a, b);
}

static __inline__ __attribute__((always_inline)) float nanf(const char *tagp)
{
  return __nv_nanf((const signed char *) tagp);
}







static __inline__ __attribute__((always_inline)) float sinf(float a)
{


#line 8359 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\math_functions.h"
  return __nv_sinf(a);
#line 8361 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\math_functions.h"
}

static __inline__ __attribute__((always_inline)) float cosf(float a)
{


#line 8368 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\math_functions.h"
  return __nv_cosf(a);
#line 8370 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\math_functions.h"
}

static __inline__ __attribute__((always_inline)) void sincosf(float a, float *sptr, float *cptr)
{


#line 8377 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\math_functions.h"
  __nv_sincosf(a, sptr, cptr);
#line 8379 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\math_functions.h"
}

static __inline__ __attribute__((always_inline)) float sinpif(float a)
{
  return __nv_sinpif(a);
}

static __inline__ __attribute__((always_inline)) float cospif(float a)
{
  return __nv_cospif(a);
}

static __inline__ __attribute__((always_inline)) void sincospif(float a, float *sptr, float *cptr)
{
  __nv_sincospif(a, sptr, cptr);
}

static __inline__ __attribute__((always_inline)) float tanf(float a)
{


#line 8401 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\math_functions.h"
  return __nv_tanf(a);
#line 8403 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\math_functions.h"
}

static __inline__ __attribute__((always_inline)) float log2f(float a)
{


#line 8410 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\math_functions.h"
  return __nv_log2f(a);
#line 8412 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\math_functions.h"
}

static __inline__ __attribute__((always_inline)) float expf(float a)
{


#line 8419 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\math_functions.h"
  return __nv_expf(a);
#line 8421 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\math_functions.h"
}

static __inline__ __attribute__((always_inline)) float exp10f(float a)
{


#line 8428 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\math_functions.h"
  return __nv_exp10f(a);
#line 8430 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\math_functions.h"
}

static __inline__ __attribute__((always_inline)) float coshf(float a)
{
  return __nv_coshf(a);
}

static __inline__ __attribute__((always_inline)) float sinhf(float a)
{
  return __nv_sinhf(a);
}

static __inline__ __attribute__((always_inline)) float tanhf(float a)
{
  return __nv_tanhf(a);
}

static __inline__ __attribute__((always_inline)) float atan2f(float a, float b)
{
  return __nv_atan2f(a, b);
}

static __inline__ __attribute__((always_inline)) float atanf(float a)
{
  return __nv_atanf(a);
}

static __inline__ __attribute__((always_inline)) float asinf(float a)
{
  return __nv_asinf(a);
}

static __inline__ __attribute__((always_inline)) float acosf(float a)
{
  return __nv_acosf(a);
}

static __inline__ __attribute__((always_inline)) float logf(float a)
{


#line 8472 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\math_functions.h"
  return __nv_logf(a);
#line 8474 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\math_functions.h"
}

static __inline__ __attribute__((always_inline)) float log10f(float a)
{


#line 8481 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\math_functions.h"
  return __nv_log10f(a);
#line 8483 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\math_functions.h"
}

static __inline__ __attribute__((always_inline)) float log1pf(float a)
{
  return __nv_log1pf(a);
}

static __inline__ __attribute__((always_inline)) float acoshf(float a)
{
  return __nv_acoshf(a);
}

static __inline__ __attribute__((always_inline)) float asinhf(float a)
{
  return __nv_asinhf(a);
}

static __inline__ __attribute__((always_inline)) float atanhf(float a)
{
  return __nv_atanhf(a);
}

static __inline__ __attribute__((always_inline)) float expm1f(float a)
{
  return __nv_expm1f(a);
}

static __inline__ __attribute__((always_inline)) float hypotf(float a, float b)
{
  return __nv_hypotf(a, b);
}

static __inline__ __attribute__((always_inline)) float cbrtf(float a)
{
  return __nv_cbrtf(a);
}

static __inline__ __attribute__((always_inline)) float rcbrtf(float a)
{
  return __nv_rcbrtf(a);
}

static __inline__ __attribute__((always_inline)) float j0f(float a)
{
  return __nv_j0f(a);
}

static __inline__ __attribute__((always_inline)) float j1f(float a)
{
  return __nv_j1f(a);
}

static __inline__ __attribute__((always_inline)) float y0f(float a)
{
  return __nv_y0f(a);
}

static __inline__ __attribute__((always_inline)) float y1f(float a)
{
  return __nv_y1f(a);
}

static __inline__ __attribute__((always_inline)) float ynf(int n, float a)
{
  return __nv_ynf(n, a);
}

static __inline__ __attribute__((always_inline)) float jnf(int n, float a)
{
  return __nv_jnf(n, a);
}

static __inline__ __attribute__((always_inline)) float erff(float a)
{
  return __nv_erff(a);
}

















 
static __inline__ __attribute__((always_inline)) float erfinvf(float a)
{
  return __nv_erfinvf(a);
}

static __inline__ __attribute__((always_inline)) float erfcf(float a)
{
  return __nv_erfcf(a);
}

static __inline__ __attribute__((always_inline)) float erfcxf(float a)
{
  return __nv_erfcxf(a);
}

static __inline__ __attribute__((always_inline)) float erfcinvf(float a)
{
  return __nv_erfcinvf(a);
}

static __inline__ __attribute__((always_inline)) float normcdfinvf(float a)
{
  return __nv_normcdfinvf(a);
}





static __inline__ __attribute__((always_inline)) float normcdff(float a)
{
  return __nv_normcdff(a);
}

static __inline__ __attribute__((always_inline)) float lgammaf(float a)
{
  return __nv_lgammaf(a);
}

static __inline__ __attribute__((always_inline)) float ldexpf(float a, int b)
{
  return __nv_ldexpf(a, b);
}

static __inline__ __attribute__((always_inline)) float scalbnf(float a, int b)
{
  return __nv_scalbnf(a, b);
}

static __inline__ __attribute__((always_inline)) float scalblnf(float a, long int b)
{
  int t;
  if (b > 2147483647L) {
    t = 2147483647;
  } else if (b < (-2147483647 - 1)) {
    t = (-2147483647 - 1);
  } else {
    t = (int)b;
  }
  return scalbnf(a, t);
}

static __inline__ __attribute__((always_inline)) float frexpf(float a, int *b)
{
  return __nv_frexpf(a, b);
}

static __inline__ __attribute__((always_inline)) float modff(float a, float *b)
{
  return __nv_modff(a, b);
}

static __inline__ __attribute__((always_inline)) float fmodf(float a, float b)
{
  return __nv_fmodf(a, b);
}

static __inline__ __attribute__((always_inline)) float remainderf(float a, float b)
{
  return __nv_remainderf(a, b);
}

static __inline__ __attribute__((always_inline)) float remquof(float a, float b, int* quo)
{
  return __nv_remquof(a, b, quo);
}

static __inline__ __attribute__((always_inline)) float fmaf(float a, float b, float c)
{
  return __nv_fmaf(a, b, c);
}

static __inline__ __attribute__((always_inline)) float powif(float a, int b)
{
  return __nv_powif(a, b);
}

static __inline__ __attribute__((always_inline)) double powi(double a, int b)
{
  return __nv_powi(a, b);
}

static __inline__ __attribute__((always_inline)) float powf(float a, float b)
{


#line 8684 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\math_functions.h"
  return __nv_powf(a, b);
#line 8686 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\math_functions.h"
}





static __inline__ __attribute__((always_inline)) float tgammaf(float a)
{
  return __nv_tgammaf(a);
}

static __inline__ __attribute__((always_inline)) float roundf(float a)
{
  return __nv_roundf(a);
}

static __inline__ __attribute__((always_inline)) long long int llroundf(float a)
{
  return __nv_llroundf(a);
}

static __inline__ __attribute__((always_inline)) long int lroundf(float a)
{


#line 8712 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\math_functions.h"
  return (long int)(roundf(a));
#line 8714 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\math_functions.h"
}

static __inline__ __attribute__((always_inline)) float fdimf(float a, float b)
{
  return __nv_fdimf(a, b);
}

static __inline__ __attribute__((always_inline)) int ilogbf(float a)
{
  return __nv_ilogbf(a);
}

static __inline__ __attribute__((always_inline)) float logbf(float a)
{
  return __nv_logbf(a);
}


























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 11445 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\math_functions.h"


























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 13680 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\math_functions.h"

#line 13682 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\math_functions.h"





#line 13688 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\math_functions.h"





#line 13694 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\math_functions.h"



#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\math_functions_dbl_ptx3.h"
































































static __inline__ __attribute__((always_inline)) double rint(double a)
{
  return __nv_rint(a);
}

static __inline__ __attribute__((always_inline)) long int lrint(double a)
{


#line 75 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\math_functions_dbl_ptx3.h"
  return (long int)__double2int_rn(a);
#line 77 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\math_functions_dbl_ptx3.h"
}

static __inline__ __attribute__((always_inline)) long long int llrint(double a)
{
  return __nv_llrint(a);
}

static __inline__ __attribute__((always_inline)) double nearbyint(double a)
{
  return __nv_nearbyint(a);
}







static __inline__ __attribute__((always_inline)) int __signbitd(double a)
{
  return __nv_signbitd(a);
}

static __inline__ __attribute__((always_inline)) int __isfinited(double a)
{
  return __nv_isfinited(a);
}

static __inline__ __attribute__((always_inline)) int __isinfd(double a)
{
  return __nv_isinfd(a);
}

static __inline__ __attribute__((always_inline)) int __isnand(double a)
{
  return __nv_isnand(a);
}























#line 138 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\math_functions_dbl_ptx3.h"

static __inline__ __attribute__((always_inline)) int __signbit(double a)
{
  return __signbitd(a);
}

static __inline__ __attribute__((always_inline)) int __signbitl(double a)
{
  return __signbit((double)a);
}

static __inline__ __attribute__((always_inline)) int __finite(double a)
{
  return __isfinited(a);
}

static __inline__ __attribute__((always_inline)) int __finitel(double a)
{
  return __finite((double)a);
}

static __inline__ __attribute__((always_inline)) int __isinf(double a)
{
  return __isinfd(a);
}

static __inline__ __attribute__((always_inline)) int __isinfl(double a)
{
  return __isinf((double)a);
}

static __inline__ __attribute__((always_inline)) int __isnan(double a)
{
  return __isnand(a);
}

static __inline__ __attribute__((always_inline)) int __isnanl(double a)
{
  return __isnan((double)a);
}

#line 180 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\math_functions_dbl_ptx3.h"

static __inline__ __attribute__((always_inline)) double copysign(double a, double b)
{
  return __nv_copysign(a, b);
}

static __inline__ __attribute__((always_inline)) void sincos(double a, double *sptr, double *cptr)
{
  __nv_sincos(a, sptr, cptr);
}

static __inline__ __attribute__((always_inline)) void sincospi(double a, double *sptr, double *cptr)
{
  __nv_sincospi(a, sptr, cptr);
}

static __inline__ __attribute__((always_inline)) double sin(double a)
{
  return __nv_sin(a);
}

static __inline__ __attribute__((always_inline)) double cos(double a)
{
  return __nv_cos(a);
}

static __inline__ __attribute__((always_inline)) double sinpi(double a)
{
  return __nv_sinpi(a);
}

static __inline__ __attribute__((always_inline)) double cospi(double a)
{
  return __nv_cospi(a);
}

static __inline__ __attribute__((always_inline)) double tan(double a)
{
  return __nv_tan(a);
}

static __inline__ __attribute__((always_inline)) double log(double a)
{
  return __nv_log(a);
}

static __inline__ __attribute__((always_inline)) double log2(double a)
{
  return __nv_log2(a);
}

static __inline__ __attribute__((always_inline)) double log10(double a)
{
  return __nv_log10(a);
}

static __inline__ __attribute__((always_inline)) double log1p(double a)
{
  return __nv_log1p(a);
}

static __inline__ __attribute__((always_inline)) double exp(double a)
{
  return __nv_exp(a);
}

static __inline__ __attribute__((always_inline)) double exp2(double a)
{
  return __nv_exp2(a);
}

static __inline__ __attribute__((always_inline)) double exp10(double a)
{
  return __nv_exp10(a);
}

static __inline__ __attribute__((always_inline)) double expm1(double a)
{
  return __nv_expm1(a);
}

static __inline__ __attribute__((always_inline)) double cosh(double a)
{
  return __nv_cosh(a);
}

static __inline__ __attribute__((always_inline)) double sinh(double a)
{
  return __nv_sinh(a);
}

static __inline__ __attribute__((always_inline)) double tanh(double a)
{
  return __nv_tanh(a);
}

static __inline__ __attribute__((always_inline)) double atan2(double a, double b)
{
  return __nv_atan2(a, b);
}

static __inline__ __attribute__((always_inline)) double atan(double a)
{
  return __nv_atan(a);
}

static __inline__ __attribute__((always_inline)) double asin(double a)
{
  return __nv_asin(a);
}

static __inline__ __attribute__((always_inline)) double acos(double a)
{
  return __nv_acos(a);
}

static __inline__ __attribute__((always_inline)) double acosh(double a)
{
  return __nv_acosh(a);
}

static __inline__ __attribute__((always_inline)) double asinh(double a)
{
  return __nv_asinh(a);  
}

static __inline__ __attribute__((always_inline)) double atanh(double a)
{
  return __nv_atanh(a);
}

static __inline__ __attribute__((always_inline)) double hypot(double a, double b)
{
  return __nv_hypot(a, b);
}

static __inline__ __attribute__((always_inline)) double cbrt(double a)
{
  return __nv_cbrt(a);
}

static __inline__ __attribute__((always_inline)) double rcbrt(double a)
{
  return __nv_rcbrt(a);
}

static __inline__ __attribute__((always_inline)) double pow(double a, double b)
{
  return __nv_pow(a, b);
}

static __inline__ __attribute__((always_inline)) double j0(double a)
{
  return __nv_j0(a);
}

static __inline__ __attribute__((always_inline)) double j1(double a)
{
  return __nv_j1(a);
}

static __inline__ __attribute__((always_inline)) double y0(double a)
{
  return __nv_y0(a);
}

static __inline__ __attribute__((always_inline)) double y1(double a)
{
  return __nv_y1(a);
}





static __inline__ __attribute__((always_inline)) double yn(int n, double a)
{
  return __nv_yn(n, a);
}








static __inline__ __attribute__((always_inline)) double jn(int n, double a)
{
  return __nv_jn(n, a);
}

static __inline__ __attribute__((always_inline)) double erf(double a)
{
  return __nv_erf(a);
}






static __inline__ __attribute__((always_inline)) double erfinv(double a)
{
  return __nv_erfinv(a);
}

static __inline__ __attribute__((always_inline)) double erfcinv(double a)
{
  return __nv_erfcinv(a);
}

static __inline__ __attribute__((always_inline)) double normcdfinv(double a)
{
  return __nv_normcdfinv(a);
}

static __inline__ __attribute__((always_inline)) double erfc(double a)  
{  
  return __nv_erfc(a);
}

static __inline__ __attribute__((always_inline)) double erfcx(double a)  
{
  return __nv_erfcx(a);
}





static __inline__ __attribute__((always_inline)) double normcdf(double a)
{
  return __nv_normcdf(a);
}

static __inline__ __attribute__((always_inline)) double tgamma(double a)
{
  return __nv_tgamma(a);
}

static __inline__ __attribute__((always_inline)) double lgamma(double a)
{
  return __nv_lgamma(a);
}

static __inline__ __attribute__((always_inline)) double ldexp(double a, int b)
{
  return __nv_ldexp(a, b);
}

static __inline__ __attribute__((always_inline)) double scalbn(double a, int b)
{
  return __nv_scalbn(a, b);
}

static __inline__ __attribute__((always_inline)) double scalbln(double a, long int b)
{




#line 443 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\math_functions_dbl_ptx3.h"
  return scalbn(a, (int)b);
}

static __inline__ __attribute__((always_inline)) double frexp(double a, int *b)
{
  return __nv_frexp(a, b);  
}

static __inline__ __attribute__((always_inline)) double modf(double a, double *b)
{
  return __nv_modf(a, b);
}

static __inline__ __attribute__((always_inline)) double fmod(double a, double b)
{
  return __nv_fmod(a, b);
}

static __inline__ __attribute__((always_inline)) double remainder(double a, double b)
{
  return __nv_remainder(a, b);
}

static __inline__ __attribute__((always_inline)) double remquo(double a, double b, int *c)
{
  return __nv_remquo(a, b, c);
}

static __inline__ __attribute__((always_inline)) double nextafter(double a, double b)
{
  return __nv_nextafter(a, b);
}

static __inline__ __attribute__((always_inline)) double nan(const char *tagp)
{
  return __nv_nan((const signed char *) tagp);
}

static __inline__ __attribute__((always_inline)) double round(double a)
{
  return __nv_round(a);
}

static __inline__ __attribute__((always_inline)) long long int llround(double a)
{
  return __nv_llround(a);
}

static __inline__ __attribute__((always_inline)) long int lround(double a)
{


#line 496 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\math_functions_dbl_ptx3.h"
  return (long int)round(a);
#line 498 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\math_functions_dbl_ptx3.h"
}

static __inline__ __attribute__((always_inline)) double fdim(double a, double b)
{
  return __nv_fdim(a, b);
}

static __inline__ __attribute__((always_inline)) int ilogb(double a)
{
  return __nv_ilogb(a);
}

static __inline__ __attribute__((always_inline)) double logb(double a)
{
  return __nv_logb(a);
}

static __inline__ __attribute__((always_inline)) double fma(double a, double b, double c)
{
  return __nv_fma(a, b, c);
}





















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 3997 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\math_functions_dbl_ptx3.h"

#line 3999 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\math_functions_dbl_ptx3.h"

#line 4001 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\math_functions_dbl_ptx3.h"

#line 13698 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\math_functions.h"

#line 13700 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\math_functions.h"

#line 13702 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\math_functions.h"

#line 168 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v5.5/include\\common_functions.h"

#line 170 "C:/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v5.5/include\\common_functions.h"

#line 358 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
#line 358 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
static  __attribute__((device))  __attribute__((__used__)) const long long _ZTVSt14error_category[9] = {0LL,0LL,0LL,0LL,0LL,0LL,0LL,0LL,0LL};
#line 359 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
static  __attribute__((device))  __attribute__((__used__)) const long long _ZTVSt23_Generic_error_category[9] = {0LL,0LL,0LL,0LL,0LL,0LL,0LL,0LL,0LL};
#line 360 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
static  __attribute__((device))  __attribute__((__used__)) const long long _ZTVSt24_Iostream_error_category[9] = {0LL,0LL,0LL,0LL,0LL,0LL,0LL,0LL,0LL};
#line 361 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
static  __attribute__((device))  __attribute__((__used__)) const long long _ZTVSt22_System_error_category[9] = {0LL,0LL,0LL,0LL,0LL,0LL,0LL,0LL,0LL};

#line 364 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"

#line 366 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"

#line 368 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"

#line 370 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
#line 239 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\vector_functions.h"
static  __inline__ struct float3 _ZN39_INTERNAL_17_Particles_cpp1_ii_610dbc6511make_float3Efff(
#line 239 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\vector_functions.h"
float x, 
#line 239 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\vector_functions.h"
float y, 
#line 239 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\vector_functions.h"
float z){
#line 239 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\vector_functions.h"
{
#line 240 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\vector_functions.h"
{
#line 241 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\vector_functions.h"
 struct float3 __cuda_local_var_41583_10_non_const_t;
#line 241 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\vector_functions.h"
(__cuda_local_var_41583_10_non_const_t.x) = x;
#line 241 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\vector_functions.h"
(__cuda_local_var_41583_10_non_const_t.y) = y;
#line 241 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\vector_functions.h"
(__cuda_local_var_41583_10_non_const_t.z) = z;
#line 241 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\vector_functions.h"
return __cuda_local_var_41583_10_non_const_t;
#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\vector_functions.h"
}
#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\vector_functions.h"
}}
#line 244 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\vector_functions.h"
static  __inline__ struct float4 _ZN39_INTERNAL_17_Particles_cpp1_ii_610dbc6511make_float4Effff(
#line 244 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\vector_functions.h"
float x, 
#line 244 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\vector_functions.h"
float y, 
#line 244 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\vector_functions.h"
float z, 
#line 244 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\vector_functions.h"
float w){
#line 244 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\vector_functions.h"
{
#line 245 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\vector_functions.h"
{
#line 246 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\vector_functions.h"
 struct float4 __cuda_local_var_41588_10_non_const_t;
#line 246 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\vector_functions.h"
(__cuda_local_var_41588_10_non_const_t.x) = x;
#line 246 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\vector_functions.h"
(__cuda_local_var_41588_10_non_const_t.y) = y;
#line 246 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\vector_functions.h"
(__cuda_local_var_41588_10_non_const_t.z) = z;
#line 246 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\vector_functions.h"
(__cuda_local_var_41588_10_non_const_t.w) = w;
#line 246 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\vector_functions.h"
return __cuda_local_var_41588_10_non_const_t;
#line 247 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\vector_functions.h"
}
#line 247 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\vector_functions.h"
}}
#line 2631 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\texture_fetch_functions.h"
static  __inline__ __attribute__((always_inline)) struct float4 _ZN39_INTERNAL_17_Particles_cpp1_ii_610dbc655tex3DE7textureI6float4Li3EL19cudaTextureReadMode0EEfff(
#line 2631 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\texture_fetch_functions.h"
__attribute__((__texture__)) __texture_type__ t, 
#line 2631 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\texture_fetch_functions.h"
float x, 
#line 2631 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\texture_fetch_functions.h"
float y, 
#line 2631 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\texture_fetch_functions.h"
float z){
#line 2631 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\texture_fetch_functions.h"
{
#line 2632 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\texture_fetch_functions.h"
{
#line 2633 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\texture_fetch_functions.h"
 struct float4 __cuda_local_var_138162_10_non_const_v;
#line 2633 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\texture_fetch_functions.h"
__cuda_local_var_138162_10_non_const_v = (__ftexfetch3D(t, (_ZN39_INTERNAL_17_Particles_cpp1_ii_610dbc6511make_float4Effff(x, y, z, (0.0F)))));
#line 2635 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\texture_fetch_functions.h"
return _ZN39_INTERNAL_17_Particles_cpp1_ii_610dbc6511make_float4Effff((__cuda_local_var_138162_10_non_const_v.x), (__cuda_local_var_138162_10_non_const_v.y), (__cuda_local_var_138162_10_non_const_v.z), (__cuda_local_var_138162_10_non_const_v.w));
#line 2636 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\texture_fetch_functions.h"
}
#line 2636 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v5.5\\include\\texture_fetch_functions.h"
}}
#line 127 "../include\\cutil_math.h"
 __inline__ struct float3 _Z11make_float36float4(
#line 127 "../include\\cutil_math.h"
struct float4 a){
#line 127 "../include\\cutil_math.h"
{
#line 128 "../include\\cutil_math.h"
{
#line 129 "../include\\cutil_math.h"
return _ZN39_INTERNAL_17_Particles_cpp1_ii_610dbc6511make_float3Efff((a.x), (a.y), (a.z));
#line 130 "../include\\cutil_math.h"
}
#line 130 "../include\\cutil_math.h"
}}
#line 254 "../include\\cutil_math.h"
 __inline__ struct float3 _ZngR6float3(
#line 254 "../include\\cutil_math.h"
struct float3 *a){
#line 254 "../include\\cutil_math.h"
{
#line 255 "../include\\cutil_math.h"
{
#line 256 "../include\\cutil_math.h"
return _ZN39_INTERNAL_17_Particles_cpp1_ii_610dbc6511make_float3Efff((-(a->x)), (-(a->y)), (-(a->z)));
#line 257 "../include\\cutil_math.h"
}
#line 257 "../include\\cutil_math.h"
}}
#line 343 "../include\\cutil_math.h"
 __inline__ void _ZpLR6float3S_(
#line 343 "../include\\cutil_math.h"
struct float3 *a, 
#line 343 "../include\\cutil_math.h"
struct float3 b){
#line 343 "../include\\cutil_math.h"
{
#line 344 "../include\\cutil_math.h"
{
#line 345 "../include\\cutil_math.h"
(a->x) += (b.x);
#line 345 "../include\\cutil_math.h"
(a->y) += (b.y);
#line 345 "../include\\cutil_math.h"
(a->z) += (b.z);
#line 346 "../include\\cutil_math.h"
} 
#line 346 "../include\\cutil_math.h"
}}
#line 738 "../include\\cutil_math.h"
 __inline__ void _ZmLR6float3f(
#line 738 "../include\\cutil_math.h"
struct float3 *a, 
#line 738 "../include\\cutil_math.h"
float b){
#line 738 "../include\\cutil_math.h"
{
#line 739 "../include\\cutil_math.h"
{
#line 740 "../include\\cutil_math.h"
(a->x) *= b;
#line 740 "../include\\cutil_math.h"
(a->y) *= b;
#line 740 "../include\\cutil_math.h"
(a->z) *= b;
#line 741 "../include\\cutil_math.h"
} 
#line 741 "../include\\cutil_math.h"
}}
#line 801 "../include\\cutil_math.h"
 __inline__ void _ZmLR6float4f(
#line 801 "../include\\cutil_math.h"
struct float4 *a, 
#line 801 "../include\\cutil_math.h"
float b){
#line 801 "../include\\cutil_math.h"
{
#line 802 "../include\\cutil_math.h"
{
#line 803 "../include\\cutil_math.h"
(a->x) *= b;
#line 803 "../include\\cutil_math.h"
(a->y) *= b;
#line 803 "../include\\cutil_math.h"
(a->z) *= b;
#line 803 "../include\\cutil_math.h"
(a->w) *= b;
#line 804 "../include\\cutil_math.h"
} 
#line 804 "../include\\cutil_math.h"
}}
#line 922 "../include\\cutil_math.h"
 __inline__ struct float3 _Z5fminf6float3S_(
#line 922 "../include\\cutil_math.h"
struct float3 a, 
#line 922 "../include\\cutil_math.h"
struct float3 b){
#line 922 "../include\\cutil_math.h"
{
#line 923 "../include\\cutil_math.h"
{
#line 924 "../include\\cutil_math.h"
return _ZN39_INTERNAL_17_Particles_cpp1_ii_610dbc6511make_float3Efff((fminf((a.x), (b.x))), (fminf((a.y), (b.y))), (fminf((a.z), (b.z))));
#line 925 "../include\\cutil_math.h"
}
#line 925 "../include\\cutil_math.h"
}}
#line 965 "../include\\cutil_math.h"
 __inline__ struct float3 _Z5fmaxf6float3S_(
#line 965 "../include\\cutil_math.h"
struct float3 a, 
#line 965 "../include\\cutil_math.h"
struct float3 b){
#line 965 "../include\\cutil_math.h"
{
#line 966 "../include\\cutil_math.h"
{
#line 967 "../include\\cutil_math.h"
return _ZN39_INTERNAL_17_Particles_cpp1_ii_610dbc6511make_float3Efff((fmaxf((a.x), (b.x))), (fmaxf((a.y), (b.y))), (fmaxf((a.z), (b.z))));
#line 968 "../include\\cutil_math.h"
}
#line 968 "../include\\cutil_math.h"
}}
#line 1123 "../include\\cutil_math.h"
 __inline__ float _Z3dot6float3S_(
#line 1123 "../include\\cutil_math.h"
struct float3 a, 
#line 1123 "../include\\cutil_math.h"
struct float3 b){
#line 1123 "../include\\cutil_math.h"
{
#line 1124 "../include\\cutil_math.h"
{
#line 1125 "../include\\cutil_math.h"
return (((a.x) * (b.x)) + ((a.y) * (b.y))) + ((a.z) * (b.z));
#line 1126 "../include\\cutil_math.h"
}
#line 1126 "../include\\cutil_math.h"
}}
#line 21 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
 int _Z5IsOutP6float4P6float3S2_(
#line 21 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
struct float4 *pos, 
#line 21 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
struct float3 *min, 
#line 21 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
struct float3 *max){
#line 21 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
{
#line 22 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
{
#line 23 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
return (int)(((((((min->x) > (pos->x)) || ((max->x) < (pos->x))) || ((min->y) > (pos->y))) || ((max->y) < (pos->y))) || ((min->z) > (pos->z))) || ((max->z) < (pos->z)));
#line 27 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
}
#line 27 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
}}
#line 29 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
 __nv_bool _Z7IsAliveP6float4(
#line 29 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
struct float4 *pos){
#line 29 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
{
#line 30 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
{
#line 31 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
return (__nv_bool)((((double)(pos->w)) > (0.5)) && (((double)(pos->w)) < (1.5)));
#line 32 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
}
#line 32 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
}}
#line 34 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
 __nv_bool _Z7WasDeadP6float4(
#line 34 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
struct float4 *pos){
#line 34 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
{
#line 35 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
{
#line 36 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
return (__nv_bool)((((double)(pos->w)) > (1.5)) && (((double)(pos->w)) < (2.5)));
#line 37 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
}
#line 37 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
}}
#line 324 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
 float _Z11getDistance6float4S_(
#line 324 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
Plane p, 
#line 324 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
struct float4 position){
#line 324 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
{
#line 325 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
{
#line 326 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
return (_Z3dot6float3S_((_Z11make_float36float4(position)), (_Z11make_float36float4(p)))) - (p.w);
#line 327 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
}
#line 327 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
}}
#line 329 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
 __nv_bool _Z9isOutside6float4S_(
#line 329 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
Plane p, 
#line 329 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
struct float4 position){
#line 329 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
{
#line 330 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
{
#line 331 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
return (__nv_bool)((_Z11getDistance6float4S_(p, position)) < (0.0F));
#line 332 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
}
#line 332 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
}}
#line 354 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
 void _Z7_reduceIPF6float3S0_S0_EEvP6float4PS0_T_(
#line 354 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
struct float4 *data, 
#line 354 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
struct float3 *dst, 
#line 354 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
function _operator){
#line 354 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
{
#line 355 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
{
#line 358 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
 UINT __cuda_local_var_248887_7_non_const_id;
#line 359 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
 UINT __cuda_local_var_248888_7_non_const_si;
#line 361 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
 struct float4 __cuda_local_var_248890_9_non_const_d0;
#line 362 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
 struct float4 __cuda_local_var_248891_12_non_const_d1;
#line 358 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
__cuda_local_var_248887_7_non_const_id = (threadIdx.x);
#line 359 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
__cuda_local_var_248888_7_non_const_si = (((2U * (blockIdx.x)) * (blockDim.x)) + (threadIdx.x));
#line 361 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
__cuda_local_var_248890_9_non_const_d0 = (data[__cuda_local_var_248888_7_non_const_si]);
#line 362 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
__cuda_local_var_248891_12_non_const_d1 = (data[(__cuda_local_var_248888_7_non_const_si + (blockDim.x))]);
#line 364 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
((s_d)[__cuda_local_var_248887_7_non_const_id]) = (_operator((_ZN39_INTERNAL_17_Particles_cpp1_ii_610dbc6511make_float3Efff((__cuda_local_var_248890_9_non_const_d0.x), (__cuda_local_var_248890_9_non_const_d0.y), (__cuda_local_var_248890_9_non_const_d0.z))), (_ZN39_INTERNAL_17_Particles_cpp1_ii_610dbc6511make_float3Efff((__cuda_local_var_248891_12_non_const_d1.x), (__cuda_local_var_248891_12_non_const_d1.y), (__cuda_local_var_248891_12_non_const_d1.z)))));
#line 366 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
__syncthreads();
#line 366 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
{
#line 368 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
 UINT i;
#line 368 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
i = ((blockDim.x) / 2U);
#line 368 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
for (; (i > 0U); i >>= 1)
#line 369 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
{
#line 370 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
if (__cuda_local_var_248887_7_non_const_id < i)
#line 371 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
{
#line 372 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
((s_d)[__cuda_local_var_248887_7_non_const_id]) = (_operator(((s_d)[(__cuda_local_var_248887_7_non_const_id + i)]), ((s_d)[__cuda_local_var_248887_7_non_const_id])));
#line 373 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
}
#line 375 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
__syncthreads();
#line 376 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
}
#line 376 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
}
#line 378 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
if (__cuda_local_var_248887_7_non_const_id == 0U)
#line 379 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
{
#line 380 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
(dst[(blockIdx.x)]) = ((s_d)[0]);
#line 381 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
}
#line 382 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
} 
#line 382 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
}}
#line 39 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
__attribute__((global)) __attribute__((__used__)) void _computeEmitter(
#line 39 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
struct float4 *positions, 
#line 39 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
struct float4 *startingPositions, 
#line 39 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
struct float3 *velos, 
#line 39 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
struct float3 *acc, 
#line 39 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
struct EmitterData *ed, 
#line 39 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
struct float3 translation, 
#line 39 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
float time, 
#line 39 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
float dt, 
#line 39 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
float start, 
#line 39 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
float end, 
#line 39 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
UINT N){
#line 39 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
{
#line 40 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
{
#line 41 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
 UINT __cuda_local_var_248570_10_non_const_id;
#line 42 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
 struct float4 __cuda_local_var_248571_12_non_const_pos;
#line 43 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
 struct EmitterData __cuda_local_var_248572_17_non_const_data;
#line 41 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
__cuda_local_var_248570_10_non_const_id = (((blockDim.x) * (blockIdx.x)) + (threadIdx.x));
#line 42 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
__cuda_local_var_248571_12_non_const_pos = (positions[__cuda_local_var_248570_10_non_const_id]);
#line 43 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
__cuda_local_var_248572_17_non_const_data = (ed[__cuda_local_var_248570_10_non_const_id]);
#line 45 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
(__cuda_local_var_248572_17_non_const_data.time) += dt;
#line 47 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
if ((_Z7IsAliveP6float4((&__cuda_local_var_248571_12_non_const_pos))) && ((time - (__cuda_local_var_248572_17_non_const_data.birthTime)) > end))
#line 48 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
{
#line 49 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
__cuda_local_var_248571_12_non_const_pos = (startingPositions[__cuda_local_var_248570_10_non_const_id]);
#line 50 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
(__cuda_local_var_248571_12_non_const_pos.w) = (0.0F);
#line 51 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
(positions[__cuda_local_var_248570_10_non_const_id]) = __cuda_local_var_248571_12_non_const_pos;
#line 53 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
(__cuda_local_var_248572_17_non_const_data.birthTime) = time;
#line 54 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
(ed[__cuda_local_var_248570_10_non_const_id]) = __cuda_local_var_248572_17_non_const_data;
#line 55 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
(acc[__cuda_local_var_248570_10_non_const_id]) = (_ZN39_INTERNAL_17_Particles_cpp1_ii_610dbc6511make_float3Efff((0.0F), (0.0F), (0.0F)));
#line 56 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
(velos[__cuda_local_var_248570_10_non_const_id]) = (_ZN39_INTERNAL_17_Particles_cpp1_ii_610dbc6511make_float3Efff((0.0F), (0.0F), (0.0F)));
#line 57 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
}
#line 59 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
if ((!(_Z7IsAliveP6float4((&__cuda_local_var_248571_12_non_const_pos)))) && ((__cuda_local_var_248572_17_non_const_data.time) > (end * (__cuda_local_var_248572_17_non_const_data.rand))))
#line 60 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
{
#line 61 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
(__cuda_local_var_248571_12_non_const_pos.x) += (translation.x);
#line 62 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
(__cuda_local_var_248571_12_non_const_pos.y) += (translation.y);
#line 63 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
(__cuda_local_var_248571_12_non_const_pos.z) += (translation.z);
#line 64 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
(__cuda_local_var_248571_12_non_const_pos.w) = (1.0F);
#line 65 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
(__cuda_local_var_248572_17_non_const_data.birthTime) = time;
#line 66 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
(ed[__cuda_local_var_248570_10_non_const_id]) = __cuda_local_var_248572_17_non_const_data;
#line 67 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
(positions[__cuda_local_var_248570_10_non_const_id]) = __cuda_local_var_248571_12_non_const_pos;
#line 68 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
return;
#line 69 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
}
#line 71 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
(ed[__cuda_local_var_248570_10_non_const_id]) = __cuda_local_var_248572_17_non_const_data;
#line 119 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
} 
#line 119 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
}}
#line 129 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
__attribute__((global)) __attribute__((__used__)) void _computeGravity(
#line 129 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
struct float4 *positions, 
#line 129 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
struct float3 *acc, 
#line 129 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
float factor){
#line 129 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
{
#line 130 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
{
#line 131 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
 UINT __cuda_local_var_248660_10_non_const_id;
#line 132 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
 struct float4 __cuda_local_var_248661_12_non_const_pos;
#line 131 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
__cuda_local_var_248660_10_non_const_id = (((blockDim.x) * (blockIdx.x)) + (threadIdx.x));
#line 132 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
__cuda_local_var_248661_12_non_const_pos = (positions[__cuda_local_var_248660_10_non_const_id]);
#line 134 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
if (!(_Z7IsAliveP6float4((&__cuda_local_var_248661_12_non_const_pos))))
#line 134 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
{
#line 134 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
return;
#line 134 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
}
#line 134 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
;
#line 137 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
{
#line 138 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
 struct float3 __cuda_local_var_248667_16_non_const_a;
#line 138 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
__cuda_local_var_248667_16_non_const_a = (acc[__cuda_local_var_248660_10_non_const_id]);
#line 139 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
(__cuda_local_var_248667_16_non_const_a.y) += factor;
#line 140 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
(acc[__cuda_local_var_248660_10_non_const_id]) = __cuda_local_var_248667_16_non_const_a;
#line 141 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
}
#line 142 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
} 
#line 142 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
}}
#line 151 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
__attribute__((global)) __attribute__((__used__)) void _computeTurbulence(
#line 151 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
struct float4 *positions, 
#line 151 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
struct float3 *acc, 
#line 151 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
struct float3 *dirs, 
#line 151 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
UINT randomCount, 
#line 151 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
UINT time){
#line 151 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
{
#line 152 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
{
#line 153 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
 UINT __cuda_local_var_248682_10_non_const_id;
#line 154 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
 struct float4 __cuda_local_var_248683_12_non_const_pos;
#line 153 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
__cuda_local_var_248682_10_non_const_id = (((blockDim.x) * (blockIdx.x)) + (threadIdx.x));
#line 154 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
__cuda_local_var_248683_12_non_const_pos = (positions[__cuda_local_var_248682_10_non_const_id]);
#line 156 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
if (!(_Z7IsAliveP6float4((&__cuda_local_var_248683_12_non_const_pos))))
#line 156 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
{
#line 156 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
return;
#line 156 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
}
#line 156 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
;
#line 159 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
{
#line 160 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
 struct float3 __cuda_local_var_248689_16_non_const_a;
#line 161 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
 UINT __cuda_local_var_248690_14_non_const_dirsIndex;
#line 162 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
 struct float3 __cuda_local_var_248691_16_non_const_dir;
#line 160 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
__cuda_local_var_248689_16_non_const_a = (acc[__cuda_local_var_248682_10_non_const_id]);
#line 161 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
__cuda_local_var_248690_14_non_const_dirsIndex = ((__cuda_local_var_248682_10_non_const_id + time) % randomCount);
#line 162 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
__cuda_local_var_248691_16_non_const_dir = (dirs[__cuda_local_var_248690_14_non_const_dirsIndex]);
#line 163 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
(__cuda_local_var_248689_16_non_const_a.x) += (__cuda_local_var_248691_16_non_const_dir.x);
#line 164 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
(__cuda_local_var_248689_16_non_const_a.y) += (__cuda_local_var_248691_16_non_const_dir.y);
#line 165 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
(__cuda_local_var_248689_16_non_const_a.z) += (__cuda_local_var_248691_16_non_const_dir.z);
#line 166 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
(acc[__cuda_local_var_248682_10_non_const_id]) = __cuda_local_var_248689_16_non_const_a;
#line 167 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
}
#line 168 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
} 
#line 168 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
}}
#line 177 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
__attribute__((global)) __attribute__((__used__)) void _integrate(
#line 177 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
struct float4 *positions, 
#line 177 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
struct float3 *acc, 
#line 177 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
struct float3 *velocity, 
#line 177 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
float dt){
#line 177 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
{
#line 178 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
{
#line 179 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
 UINT __cuda_local_var_248708_10_non_const_id;
#line 181 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
 struct float4 __cuda_local_var_248710_12_non_const_pos;
#line 183 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
 struct float3 __cuda_local_var_248712_12_non_const_a;
#line 184 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
 struct float3 __cuda_local_var_248713_12_non_const_v;
#line 179 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
__cuda_local_var_248708_10_non_const_id = (((blockDim.x) * (blockIdx.x)) + (threadIdx.x));
#line 181 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
__cuda_local_var_248710_12_non_const_pos = (positions[__cuda_local_var_248708_10_non_const_id]);
#line 183 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
__cuda_local_var_248712_12_non_const_a = (acc[__cuda_local_var_248708_10_non_const_id]);
#line 184 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
__cuda_local_var_248713_12_non_const_v = (velocity[__cuda_local_var_248708_10_non_const_id]);
#line 187 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
(__cuda_local_var_248713_12_non_const_v.x) += ((__cuda_local_var_248712_12_non_const_a.x) * dt);
#line 188 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
(__cuda_local_var_248713_12_non_const_v.y) += ((__cuda_local_var_248712_12_non_const_a.y) * dt);
#line 189 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
(__cuda_local_var_248713_12_non_const_v.z) += ((__cuda_local_var_248712_12_non_const_a.z) * dt);
#line 191 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
(__cuda_local_var_248710_12_non_const_pos.x) += ((__cuda_local_var_248713_12_non_const_v.x) * dt);
#line 192 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
(__cuda_local_var_248710_12_non_const_pos.y) += ((__cuda_local_var_248713_12_non_const_v.y) * dt);
#line 193 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
(__cuda_local_var_248710_12_non_const_pos.z) += ((__cuda_local_var_248713_12_non_const_v.z) * dt);
#line 195 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
(velocity[__cuda_local_var_248708_10_non_const_id]) = __cuda_local_var_248713_12_non_const_v;
#line 196 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
(positions[__cuda_local_var_248708_10_non_const_id]) = __cuda_local_var_248710_12_non_const_pos;
#line 197 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
} 
#line 197 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
}}
#line 206 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
__attribute__((global)) __attribute__((__used__)) void _computeGradientField(
#line 206 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
struct float4 *positions, 
#line 206 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
struct float3 *velo, 
#line 206 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
struct float4 __val_paramposition){struct float4 position = __val_paramposition;
#line 206 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
{
#line 206 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
;
#line 207 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
{
#line 208 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
 UINT __cuda_local_var_248737_10_non_const_id;
#line 209 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
 struct float4 __cuda_local_var_248738_12_non_const_pos;
#line 215 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
 struct float3 __cuda_local_var_248744_12_non_const_coord;
#line 216 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
 float __cuda_local_var_248745_11_non_const_scale;
#line 219 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
 struct float3 __cuda_local_var_248748_12_non_const_dist;
#line 221 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
 float __cuda_local_var_248750_11_non_const_distanceSquared;
#line 223 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
 float __cuda_local_var_248752_11_non_const_range;
#line 230 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
 struct float4 __cuda_local_var_248759_12_non_const_grad;
#line 232 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
 float __cuda_local_var_248761_11_non_const_t;
#line 233 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
 float __cuda_local_var_248762_11_non_const_s;
#line 237 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
 struct float3 __cuda_local_var_248766_12_non_const_v;
#line 208 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
__cuda_local_var_248737_10_non_const_id = (((blockDim.x) * (blockIdx.x)) + (threadIdx.x));
#line 209 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
__cuda_local_var_248738_12_non_const_pos = (positions[__cuda_local_var_248737_10_non_const_id]);
#line 211 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
if (!(_Z7IsAliveP6float4((&__cuda_local_var_248738_12_non_const_pos))))
#line 211 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
{
#line 211 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
return;
#line 211 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
}
#line 211 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
;
#line 213 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
_ZmLR6float4f((&__cuda_local_var_248738_12_non_const_pos), (30.0F));
#line 215 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
__cuda_local_var_248744_12_non_const_coord = (_ZN39_INTERNAL_17_Particles_cpp1_ii_610dbc6511make_float3Efff((__cuda_local_var_248738_12_non_const_pos.x), (__cuda_local_var_248738_12_non_const_pos.y), (__cuda_local_var_248738_12_non_const_pos.z)));
#line 216 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
__cuda_local_var_248745_11_non_const_scale = (position.w);
#line 217 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
position = (_ZN39_INTERNAL_17_Particles_cpp1_ii_610dbc6511make_float4Effff((1.0F), (5.0F), (8.0F), (0.0F)));
#line 219 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
__cuda_local_var_248748_12_non_const_dist = (_ZN39_INTERNAL_17_Particles_cpp1_ii_610dbc6511make_float3Efff(((__cuda_local_var_248738_12_non_const_pos.x) - (position.x)), ((__cuda_local_var_248738_12_non_const_pos.y) - (position.y)), ((__cuda_local_var_248738_12_non_const_pos.z) - (position.z))));
#line 221 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
__cuda_local_var_248750_11_non_const_distanceSquared = (_Z3dot6float3S_(__cuda_local_var_248748_12_non_const_dist, __cuda_local_var_248748_12_non_const_dist));
#line 223 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
__cuda_local_var_248752_11_non_const_range = (30.0F);
#line 230 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
__cuda_local_var_248759_12_non_const_grad = (_ZN39_INTERNAL_17_Particles_cpp1_ii_610dbc655tex3DE7textureI6float4Li3EL19cudaTextureReadMode0EEfff(ct_gradientTexture, ((position.x) + ((__cuda_local_var_248744_12_non_const_coord.x) * __cuda_local_var_248745_11_non_const_scale)), ((position.y) + ((__cuda_local_var_248744_12_non_const_coord.y) * __cuda_local_var_248745_11_non_const_scale)), ((position.z) + ((__cuda_local_var_248744_12_non_const_coord.z) * __cuda_local_var_248745_11_non_const_scale))));
#line 232 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
__cuda_local_var_248761_11_non_const_t = (5.0F);
#line 233 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
__cuda_local_var_248762_11_non_const_s = (__cuda_local_var_248761_11_non_const_t - (__cuda_local_var_248761_11_non_const_t * ((float)(fdividef(((double)__cuda_local_var_248750_11_non_const_distanceSquared), ((double)(__cuda_local_var_248752_11_non_const_range * __cuda_local_var_248752_11_non_const_range)))))));
#line 235 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
_ZmLR6float4f((&__cuda_local_var_248759_12_non_const_grad), (6.0F));
#line 237 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
__cuda_local_var_248766_12_non_const_v = (velo[__cuda_local_var_248737_10_non_const_id]);
#line 239 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
(__cuda_local_var_248766_12_non_const_v.x) = (__cuda_local_var_248759_12_non_const_grad.x);
#line 240 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
(__cuda_local_var_248766_12_non_const_v.y) = (__cuda_local_var_248759_12_non_const_grad.y);
#line 241 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
(__cuda_local_var_248766_12_non_const_v.z) = (__cuda_local_var_248759_12_non_const_grad.z);
#line 242 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
(velo[__cuda_local_var_248737_10_non_const_id]) = __cuda_local_var_248766_12_non_const_v;
#line 243 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
} 
#line 243 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
}}
#line 253 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
__attribute__((global)) __attribute__((__used__)) void _computeGravityField(
#line 253 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
struct float4 *positions, 
#line 253 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
struct float3 *acc, 
#line 253 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
struct float4 posNrange, 
#line 253 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
int repel, 
#line 253 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
float scale){
#line 253 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
{
#line 254 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
{
#line 255 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
 UINT __cuda_local_var_248784_10_non_const_id;
#line 256 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
 struct float4 __cuda_local_var_248785_12_non_const_pos;
#line 260 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
 struct float3 __cuda_local_var_248789_12_non_const_gpos;
#line 262 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
 float __cuda_local_var_248791_11_non_const_range;
#line 264 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
 struct float3 __cuda_local_var_248793_12_non_const_grad;
#line 266 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
 float __cuda_local_var_248795_11_non_const_distanceSquared;
#line 273 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
 float __cuda_local_var_248802_11_non_const_s;
#line 278 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
 struct float3 __cuda_local_var_248807_12_non_const_a;
#line 255 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
__cuda_local_var_248784_10_non_const_id = (((blockDim.x) * (blockIdx.x)) + (threadIdx.x));
#line 256 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
__cuda_local_var_248785_12_non_const_pos = (positions[__cuda_local_var_248784_10_non_const_id]);
#line 258 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
if (!(_Z7IsAliveP6float4((&__cuda_local_var_248785_12_non_const_pos))))
#line 258 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
{
#line 258 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
return;
#line 258 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
}
#line 258 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
;
#line 260 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
__cuda_local_var_248789_12_non_const_gpos = (_ZN39_INTERNAL_17_Particles_cpp1_ii_610dbc6511make_float3Efff((posNrange.x), (posNrange.y), (posNrange.z)));
#line 262 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
__cuda_local_var_248791_11_non_const_range = ((5.0F) * (posNrange.w));
#line 264 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
__cuda_local_var_248793_12_non_const_grad = (_ZN39_INTERNAL_17_Particles_cpp1_ii_610dbc6511make_float3Efff(((__cuda_local_var_248785_12_non_const_pos.x) - (__cuda_local_var_248789_12_non_const_gpos.x)), ((__cuda_local_var_248785_12_non_const_pos.y) - (__cuda_local_var_248789_12_non_const_gpos.y)), ((__cuda_local_var_248785_12_non_const_pos.z) - (__cuda_local_var_248789_12_non_const_gpos.z))));
#line 266 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
__cuda_local_var_248795_11_non_const_distanceSquared = (_Z3dot6float3S_(__cuda_local_var_248793_12_non_const_grad, __cuda_local_var_248793_12_non_const_grad));
#line 268 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
if (__cuda_local_var_248795_11_non_const_distanceSquared > (__cuda_local_var_248791_11_non_const_range * __cuda_local_var_248791_11_non_const_range))
#line 269 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
{
#line 270 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
return;
#line 271 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
}
#line 273 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
__cuda_local_var_248802_11_non_const_s = (((float)repel) - ((float)(fdividef(((double)__cuda_local_var_248795_11_non_const_distanceSquared), ((double)(__cuda_local_var_248791_11_non_const_range * __cuda_local_var_248791_11_non_const_range))))));
#line 274 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
__cuda_local_var_248802_11_non_const_s *= scale;
#line 276 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
_ZmLR6float3f((&__cuda_local_var_248793_12_non_const_grad), __cuda_local_var_248802_11_non_const_s);
#line 278 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
__cuda_local_var_248807_12_non_const_a = (acc[__cuda_local_var_248784_10_non_const_id]);
#line 279 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
_ZpLR6float3S_((&__cuda_local_var_248807_12_non_const_a), __cuda_local_var_248793_12_non_const_grad);
#line 280 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
(acc[__cuda_local_var_248784_10_non_const_id]) = __cuda_local_var_248807_12_non_const_a;
#line 281 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
} 
#line 281 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
}}
#line 291 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
__attribute__((global)) __attribute__((__used__)) void _computeVelocityDamping(
#line 291 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
struct float4 *positions, 
#line 291 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
struct float3 *velo, 
#line 291 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
float damping){
#line 291 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
{
#line 292 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
{
#line 293 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
 UINT __cuda_local_var_248822_10_non_const_id;
#line 294 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
 struct float4 __cuda_local_var_248823_12_non_const_pos;
#line 298 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
 struct float3 __cuda_local_var_248827_12_non_const_a;
#line 293 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
__cuda_local_var_248822_10_non_const_id = (((blockDim.x) * (blockIdx.x)) + (threadIdx.x));
#line 294 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
__cuda_local_var_248823_12_non_const_pos = (positions[__cuda_local_var_248822_10_non_const_id]);
#line 296 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
if (!(_Z7IsAliveP6float4((&__cuda_local_var_248823_12_non_const_pos))))
#line 296 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
{
#line 296 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
return;
#line 296 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
}
#line 296 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
;
#line 298 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
__cuda_local_var_248827_12_non_const_a = (velo[__cuda_local_var_248822_10_non_const_id]);
#line 299 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
_ZmLR6float3f((&__cuda_local_var_248827_12_non_const_a), damping);
#line 300 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
(velo[__cuda_local_var_248822_10_non_const_id]) = __cuda_local_var_248827_12_non_const_a;
#line 301 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
} 
#line 301 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
}}
#line 334 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
__attribute__((global)) __attribute__((__used__)) void _computePlane(
#line 334 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
Plane p, 
#line 334 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
struct float3 *velos, 
#line 334 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
struct float4 *positions){
#line 334 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
{
#line 335 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
{
#line 336 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
 UINT __cuda_local_var_248865_10_non_const_id;
#line 337 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
 struct float4 __cuda_local_var_248866_12_non_const_pos;
#line 336 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
__cuda_local_var_248865_10_non_const_id = (((blockDim.x) * (blockIdx.x)) + (threadIdx.x));
#line 337 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
__cuda_local_var_248866_12_non_const_pos = (positions[__cuda_local_var_248865_10_non_const_id]);
#line 339 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
if (!(_Z7IsAliveP6float4((&__cuda_local_var_248866_12_non_const_pos))))
#line 339 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
{
#line 339 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
return;
#line 339 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
}
#line 339 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
;
#line 341 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
if (_Z9isOutside6float4S_(p, __cuda_local_var_248866_12_non_const_pos))
#line 342 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
{
#line 343 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
 struct float3 __cuda_local_var_248872_16_non_const_v;
#line 343 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
__cuda_local_var_248872_16_non_const_v = (velos[__cuda_local_var_248865_10_non_const_id]);
#line 344 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
__cuda_local_var_248872_16_non_const_v = (_ZngR6float3((&__cuda_local_var_248872_16_non_const_v)));
#line 345 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
(__cuda_local_var_248866_12_non_const_pos.x) = ((__cuda_local_var_248866_12_non_const_pos.x) + (__cuda_local_var_248872_16_non_const_v.x));
#line 346 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
(__cuda_local_var_248866_12_non_const_pos.y) = ((__cuda_local_var_248866_12_non_const_pos.y) + (__cuda_local_var_248872_16_non_const_v.y));
#line 347 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
(__cuda_local_var_248866_12_non_const_pos.z) = ((__cuda_local_var_248866_12_non_const_pos.z) + (__cuda_local_var_248872_16_non_const_v.z));
#line 350 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
}
#line 351 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
} 
#line 351 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
}}
#line 386 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
__attribute__((global)) __attribute__((__used__)) void _reduce_max4(
#line 386 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
struct float4 *data, 
#line 386 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
struct float3 *dst){
#line 386 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
{
#line 387 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
{
#line 388 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
_Z7_reduceIPF6float3S0_S0_EEvP6float4PS0_T_(data, dst, _Z5fmaxf6float3S_);
#line 389 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
} 
#line 389 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
}}
#line 391 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
__attribute__((global)) __attribute__((__used__)) void _reduce_min4(
#line 391 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
struct float4 *data, 
#line 391 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
struct float3 *dst){
#line 391 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
{
#line 392 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
{
#line 393 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
_Z7_reduceIPF6float3S0_S0_EEvP6float4PS0_T_(data, dst, _Z5fminf6float3S_);
#line 394 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
} 
#line 394 "E:/Dropbox/VisualStudio/Chimera/Source/chimera/Particles.cu"
}}

